@page "/sowing/insertpassport"
@inject IJSRuntime jsRuntime

@using Microsoft.AspNetCore.Authorization
@using ZXingBlazor.Components
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Spinner
@using Syncfusion.Blazor.DropDowns
@using HashtilERP.Shared.Models
@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager NavigationManager
@inject HttpClient Http

@attribute [Authorize(Roles = "Administrator,Thai-Guy")]

<h3>ห้องปลูก</h3>

@if (kobiPassportModels == null)
{
    <div class="col-sm">
        <div class="spin-row">
            <SfSpinner Size="40" Label="กำลังโหลดข้อมูล ..." Type="SpinnerType.Bootstrap4" Visible="true" CssClass="e-customClass"></SfSpinner>
        </div>
    </div>
}

@if (isDevice == "Mobile")
{
    <button class="btn btn-primary"
            type="button"
            @onclick="(() => ShowScanBarcode = !ShowScanBarcode)">
        @*ENTER SCAN*@
        แทรกการสแกน
    </button>
}

@*//Paasport Input*@
<input type="text" class="form-control" style="width:auto;margin-right:auto" name="GRWroom"
       placeholder="หมายเลขหนังสือเดินทาง"
       @bind=@passportInput />
<br />

<div dir="ltr" style="margin-left:auto">
    <div>
        <label>ห้องปลูก</label>
    </div>
    <SfDropDownList TValue="string" TItem="GrowingRoomNumber" Placeholder="ห้องปลูก" Width="auto" DataSource="@GrowingRoomNumber.Statuses"
                    PopupHeight="350px" PopupWidth="350px" @bind-Value="@kobipassportModel.GrowingRoom">
        <DropDownListFieldSettings Value="ID" Text="Text">

        </DropDownListFieldSettings>
    </SfDropDownList>
</div>
<br />
@if (ShowScanBarcode)
{

    <BarcodeReader ScanResult="((e) => { kobipassportModel.PassportNum=Convert.ToInt32(e); ShowScanBarcode = !ShowScanBarcode; })"
                   ShowScanBarcode="ShowScanBarcode"
                   Close="(()=>ShowScanBarcode=!ShowScanBarcode)" />

}

<button class="btn btn-success"
        type="button"
        @onclick="@InsertObject">
    @*ENTER SCAN*@
    แทรกการสแกน
</button>
<br />
<br />
@*GRID SECTION START HERE*@
<SfGrid DataSource="@kobiPassportModels" AllowGrouping="true" AllowSorting="true">
    <GridColumns>
        @*GrowingRoom*@
        <GridColumn Field=@nameof(K_Passport.GrowingRoom) HeaderText="ห้องปลูก" Type="ColumnType.Date" TextAlign="TextAlign.Center" Width="35"></GridColumn>
        @*PassportNumber*@
        <GridColumn Field=@nameof(K_Passport.PassportNum) HeaderText="หนังสือเดินทาง" TextAlign="TextAlign.Left" Width="35"></GridColumn>
    </GridColumns>
</SfGrid>


@*Modal dialog for duplicate or not found passport*@
<SfDialog Width="250px" IsModal="true" @bind-Visible="@IsVisible">
    <DialogEvents OnOverlayClick="@OnOverlayclick">
    </DialogEvents>
    <DialogTemplates>
        <Header> ผิดพลาด! </Header>
        <Content> @ModalError </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="OK" IsPrimary="true" OnClick="@CloseDialog" />

    </DialogButtons>
</SfDialog>

@*Toast Component*@
<SfToast @ref="ToastObj" Title="" Timeout=3000 Icon="e-meeting" Content="@ToastContent">
    <ToastPosition X="Center"></ToastPosition>
</SfToast>
<div class="col-lg-12 col-sm-12 col-md-12 center">
    <div id="toastBtnDefault" style="margin: auto;text-align: center">
        <SfButton Content="Show Toasts" @onclick="@ShowToast"></SfButton>
        <SfButton Content="Hide All" @onclick="@HideToast"></SfButton>
    </div>
</div>

<style>
    .e-spinner-pane.e-customClass .e-spinner-inner .e-spin-material {
        stroke: #48EB43;
        
    }
</style>

@code {

    private async Task ShowToast()
    {
        await this.ToastObj.Show();
    }

    private async Task HideToast()
    {
        await this.ToastObj.Hide("All");
    }

    SfToast ToastObj;
    private string ToastContent { get; set; } = "";

    string passportInput;
    K_Passport[] kobiPassportModels;
    K_Passport kobipassportModel = new K_Passport();
    private HubConnection hubConnection;

    //Thai-String For NotFound And Duplicate
    private static string ThaiNotFound = "ไม่พบวัตถุ!";
    private static string ThaiDuplicate = "หนังสือเดินทางอยู่ในตารางข้อมูลแล้ว!";
    private static string ThaiSaved = "บันทึกแล้ว!";
    private static string NoEnteredPassport = "ไม่ได้ใส่หมายเลข!";
    private static string NotValidValue = "ผิดค่า!";
    private static string MustEnterGrowingRoomNumber = "คุณต้องเลือกหมายเลขห้องที่กำลังเติบโต!";

    /// <summary>
    /// Modal Props and actions
    /// </summary>
    private bool IsVisible { get; set; } = false;
    private string ModalError { get; set; } = "";

    private void OpenDialog()
    {
        this.IsVisible = true;
    }

    private void OnOverlayclick(MouseEventArgs arg)
    {
        this.IsVisible = false;
    }
    private void CloseDialog()
    {
        this.IsVisible = false;
    }


    bool ShowScanBarcode { get; set; } = false;
    public int? BarCode { get; set; }
    private string isDevice { get; set; }
    private bool mobile { get; set; }

    //Check if userAgent is Pc Or Mobile
    public async Task FindResponsiveness()
    {
        mobile = await jsRuntime.InvokeAsync<bool>("isDevice");
        isDevice = mobile ? "Mobile" : "Desktop";

    }

    //When insertPassport Button clicked!
    public async void InsertObject()
    {
        if (kobipassportModel.GrowingRoom == null)
        {
            ModalError = MustEnterGrowingRoomNumber;
            OpenDialog();
            if (IsConnected) await SendMessage();
            passportInput = "";
            return;
        }
        else
        {
            await SendNewPassport(kobipassportModel);
        }

    }



    Task SendMessage() => hubConnection.SendAsync("SendMessage");

    //INITIALIZED
    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
    .WithUrl(NavigationManager.ToAbsoluteUri("/broadcastHub"))
    .Build();

        hubConnection.On("ReceiveMessage", () =>
        {
            CallLoadData();
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        await LoadData();
    }

    private void CallLoadData()
    {
        Task.Run(async () =>
        {
            await LoadData();
        });
    }

    protected async Task LoadData()
    {
        kobiPassportModels = await Http.GetFromJsonAsync<K_Passport[]>("api/KPassports/multi/" + "1");
        StateHasChanged();
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
    //POST NEW PASSPORT
    protected async Task SendNewPassport(K_Passport kobiPassport)
    {
        //IF NULL
        if (passportInput == null)
        {
            ModalError = NoEnteredPassport;
            OpenDialog();
            if (IsConnected) await SendMessage();
            passportInput = "";
            return;
        }
        try
        {
            kobiPassport.PassportNum = Convert.ToInt32((string)passportInput);
        }
        //IF LONG OR WRONG FORMAT
        catch (Exception)
        {
            ModalError = NotValidValue;
            OpenDialog();
            passportInput = "";
            if (IsConnected) await SendMessage();
        }




        var rslt = await Http.PostAsJsonAsync("api/KPassports", kobiPassport);
        var content = await rslt.Content.ReadAsStringAsync();

        //Http Response Failed On Insert
        if (!rslt.IsSuccessStatusCode)
        {
            if (content == "NOTFOUND")
            {
                ModalError = ThaiNotFound;
                OpenDialog();
                passportInput = "";
                if (IsConnected) await SendMessage();

            }
            else if (content == "DUPLICATE")
            {
                ModalError = ThaiDuplicate;
                OpenDialog();
                passportInput = "";
                if (IsConnected) await SendMessage();
            }

        }
        else
        {

            if (IsConnected) await SendMessage();
            ToastContent = ThaiSaved;
            passportInput = "";
            StateHasChanged();
            await ShowToast();

        }


    }



}
