@page "/inventory/WaitingForConfirmation"
@inject IJSRuntime jsRuntime


@using Microsoft.AspNetCore.Authorization
@using ZXingBlazor.Components
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Spinner
@using HashtilERP.Shared.Models
@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager NavigationManager
@inject HttpClient Http

@attribute [Authorize(Roles = "Administrator,Manager-GreenHouse,AuditAvgCounter,Viewer")]
<div style="text-align:right" class="alert alert-info " role="alert">
    <h3 style="text-align:center">ממתינים לאישור</h3>
</div>


@if (K_Passports == null)
{
    <div class="col-sm">
        <div class="spin-row">
            `
            <SfSpinner Size="40" Label="" Type="SpinnerType.Bootstrap4" CssClass="e-customClass" Visible="true"></SfSpinner>
        </div>
    </div>
}
@*Scan Button for search  & clear search from grid*@
<div class="row">
    @if (isDevice == "Mobile")
    {
        <div class="col">
            <button class="btn btn-primary"
                    type="button"
                    @onclick="(() => ShowScanBarcode = !ShowScanBarcode)">
                @*ENTER SCAN*@
                סריקה
            </button>
        </div>
    }
<div class="col" style="text-align:left">
    <button class="btn btn-info"
            type="button"
            @onclick="ClearGridfilter">
        הסר מסנן
    </button>
    <button class="btn btn-warning"
            type="button"
            @onclick="ClearGridSearch">
        ניקוי חיפוש
    </button>
</div>
</div>
@if (ShowScanBarcode)
{

    <BarcodeReader ScanResult="((e) => { passportInput = e; SearchBtnHandler(passportInput); ShowScanBarcode = !ShowScanBarcode; })"
                   ShowScanBarcode="ShowScanBarcode"
                   Close="(() => ShowScanBarcode = !ShowScanBarcode)" />

}

@{
    var Tool = (new List<string>() { "Search" });
}
@*GRID SECTION START HERE*@
<SfGrid DataSource="@K_Passports" @ref="@SfGrid" AllowGrouping="false" Toolbar=@Tool AllowSorting="true" AllowResizing="true"
        AllowFiltering="true" EnableRtl="true">
    <GridEvents TValue="K_Passport"></GridEvents>

    <GridEvents QueryCellInfo="CustomizeCell" CommandClicked="OnCommandClicked"
                TValue="K_Passport">
    </GridEvents>
    <GridFilterSettings Type="FilterType.CheckBox"></GridFilterSettings>
    <GridPageSettings PageSize="20"></GridPageSettings>
    <GridColumns>
        <GridColumn HeaderText="" TextAlign="TextAlign.Left" Width="150">
            <GridCommandColumns>
                <AuthorizeView Roles="Administrator,Manager-GreenHouse,AuditAvgCounter">
                    <GridCommandColumn Type=CommandButtonType.None
                                       ButtonOption="@(new CommandButtonOptions() { Content = "אישור" ,CssClass="e-success"})">
                    </GridCommandColumn>
                </AuthorizeView>
            </GridCommandColumns>
        </GridColumn>
        <GridColumn Field=@nameof(K_Passport.K_PassportId) HeaderText="" HeaderTextAlign="TextAlign.Center" Type="ColumnType.Number" IsPrimaryKey="true" Visible="false" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.PassportNum) HeaderText="פספורט" HeaderTextAlign="TextAlign.Right" Type="ColumnType.Number" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.Hamama) HeaderText="חממה" HeaderTextAlign="TextAlign.Right" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.Gamlon) HeaderText="גמלון" HeaderTextAlign="TextAlign.Right" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.Gidul) HeaderText="גידול" HeaderTextAlign="TextAlign.Right" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.Zan) HeaderText="זן" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"> </GridColumn>
        <GridColumn Field=@nameof(K_Passport.PassportAge) HeaderText="גיל" HeaderTextAlign="TextAlign.Right" Type="ColumnType.Number" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.MagashAmount) HeaderText="מגשים" HeaderTextAlign="TextAlign.Right" Type="ColumnType.Number" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.PassportStatus) HeaderText="סטטוס" HeaderTextAlign="TextAlign.Right" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.CelsTray) HeaderText="סוג מגש" HeaderTextAlign="TextAlign.Right" Format="N0" Type="ColumnType.Number" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>


    </GridColumns>
</SfGrid>
@*Confirm Dialog Setting*@
<SfDialog Target="#target"
          Width="150px"
          Height="160px"
          IsModal="true"
          EnableRtl="true"
          ShowCloseIcon="false"
          @bind-Visible="DeleteRecordConfirmVisibility">
    <DialogTemplates>
        <Header>לאשר את<br> @K_Passport.PassportNum?</Header>
        <Content>
            <SfSpinner Size="40" Label="" Type="SpinnerType.Bootstrap4" CssClass="e-customClass" Visible="@SpinnerBool"></SfSpinner>

            <div class="button-container">
                <button type="submit"
                        class="btn btn-success"
                        @onclick="ConfirmDeleteYes">
                    אישור
                </button>
                <button type="submit" style="margin-right:25px"
                        class="btn btn-danger"
                        @onclick="ConfirmDeleteNo">
                    ביטול
                </button>
            </div>
        </Content>
    </DialogTemplates>
</SfDialog>


@*Toast Component*@
<SfToast @ref="ToastObj" Title="" Timeout=3000 Icon="e-meeting" Content="@ToastContent" EnableRtl="true">
    <ToastPosition X="Center"></ToastPosition>

</SfToast>

@code{

    public K_Passport K_Passport = new K_Passport();
    public K_Passport[] K_Passports;
    private HubConnection hubConnection;
    SfGrid<K_Passport> SfGrid;
    private static string HebSaved = "נשמר!";
    bool SpinnerBool { get; set; } = false;




    //TOAST
    SfToast ToastObj;
    private string ToastContent { get; set; } = "";
    private async Task ShowToast()
    {
        await this.ToastObj.Show();
    }

    private async Task HideToast()
    {
        await this.ToastObj.Hide("All");
    }

    //CAMERA SCANNER for search in datagrid
    private string isDevice { get; set; }
    private bool mobile { get; set; }
    bool ShowScanBarcode { get; set; } = false;
    public int? BarCode { get; set; }
    string passportInput;

    //Search after Passport Scan
    public async void SearchBtnHandler(string searchKey)
    {
        await this.SfGrid.Search(searchKey);
    }

    //Clear Grid "Search" Box
    public async void ClearGridSearch()
    {
        await this.SfGrid.Search("");
    }
    public async void ClearGridfilter()
    {
        await this.SfGrid.ClearFiltering();
    }


    //Check if userAgent is Pc Or Mobile
    public async Task FindResponsiveness()
    {
        mobile = await jsRuntime.InvokeAsync<bool>("isDevice");
        isDevice = mobile ? "Mobile" : "Desktop";

    }

    // Property to control the delete dialog.
    public bool DeleteRecordConfirmVisibility { get; set; } = false;

    //INITIALIZED
    protected override async Task OnInitializedAsync()
    {
        await FindResponsiveness();
        hubConnection = new HubConnectionBuilder()
.WithUrl(NavigationManager.ToAbsoluteUri("/broadcastHub"))
.Build();

        hubConnection.On("ReceiveMessage", () =>
        {
            CallLoadData();
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        await LoadData();
    }

    private void CallLoadData()
    {
        Task.Run(async () =>
        {
            await LoadData();
        });
    }

    protected async Task LoadData()
    {
        try
        {
            K_Passports = await Http.GetFromJsonAsync<K_Passport[]>("api/KPassports/multi/" + "2");
            StateHasChanged();
        }

        catch (Exception e)
        {
            throw new Exception(e.Message);
        }
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    Task SendMessage() => hubConnection.SendAsync("SendMessage");

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }

    //Command Button Clicked In grid
    public void OnCommandClicked(CommandClickEventArgs<K_Passport> args)
    {
        if (args.CommandColumn.ButtonOption.Content == "אישור")
        {
            K_Passport = PassportAlgorithm.ArgsToObject(args.RowData);
            this.DeleteRecordConfirmVisibility = true;

            StateHasChanged();
        }
    }
    //DIALOG CANCEL
    public void ConfirmDeleteNo()
    {
        // Open the dialog
        // to give the user a chance
        // to confirm they want to delete the record.
        this.DeleteRecordConfirmVisibility = false;
    }

    //DIALOG CONFIRMED
    public async void ConfirmDeleteYes()
    {
        try
        {
            SpinnerBool = true;

            K_Passport.PassportStatus = Status.InGreenHouse.Trim();
            K_Passport.PassportStatusCode = (int)PassportStatusCode.InsideGreenHouse;
            K_Passport.IsLowAVG = false;
            var rslt = await Http.PutAsJsonAsync("api/KPassports/GreenManager/Passport/UpdateStatus/" + K_Passport.K_PassportId, K_Passport);
            var content = await rslt.Content.ReadAsStringAsync();
            if (rslt.IsSuccessStatusCode)
            {
                SpinnerBool = false;
                this.DeleteRecordConfirmVisibility = false;
                if (IsConnected) await SendMessage();
                ToastContent = HebSaved;
                StateHasChanged();
                await ShowToast();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            SpinnerBool = false;
            this.DeleteRecordConfirmVisibility = false;
            if (IsConnected) await SendMessage();
            ToastContent = e.Message;
            StateHasChanged();
            await ShowToast();
        }

    }
    //CELL MAGASH TYPE STYLE
    public void CustomizeCell(QueryCellInfoEventArgs<K_Passport> args)
    {
        if (args.Column.Field == "CelsTray")
        {
            try
            {

                if (Convert.ToDouble(args.Data.CelsTray) == 180)
                {
                    args.Cell.AddClass(new string[] { "magash-180" });
                }
                else if (Convert.ToDouble(args.Data.CelsTray) == 187)
                {
                    args.Cell.AddClass(new string[] { "magash-187" });
                }
                else if (Convert.ToDouble(args.Data.CelsTray) == 442)
                {
                    args.Cell.AddClass(new string[] { "magash-442" });
                }
                else
                {
                    args.Cell.AddClass(new string[] { "magash-308" });
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                return;
            }
        }
        ////PASSPORT STYLE
        if (args.Column.Field == "PassportNum")
        {
            args.Cell.AddClass(new string[] { "passport" });
        }
        //LOW AVG
        if (args.Column.Field == "PassportAVG")
        {
            if (args.Data.IsLowAVG == true)
            {
                args.Cell.AddClass(new string[] { "is-low-avg" });
            }
        }

        //HAMAMA STYLE
        if (args.Column.Field == "Hamama")
        {
            if (args.Data.Hamama.Trim() == "1")
            {
                args.Cell.AddClass(new string[] { "hamama1" });
            }
            else if (args.Data.Hamama.Trim() == "2")
            {
                args.Cell.AddClass(new string[] { "hamama2" });
            }
            else if (args.Data.Hamama.Trim() == "3")
            {
                args.Cell.AddClass(new string[] { "hamama3" });
            }
            else if (args.Data.Hamama.Trim() == "4")
            {
                args.Cell.AddClass(new string[] { "hamama4" });
            }
            else if (args.Data.Hamama.Trim() == "5")
            {
                args.Cell.AddClass(new string[] { "hamama5" });
            }
            else if (args.Data.Hamama.Trim() == "6")
            {
                args.Cell.AddClass(new string[] { "hamama6" });
            }
            else if (args.Data.Hamama.Trim() == "7")
            {
                args.Cell.AddClass(new string[] { "hamama7" });
            }
            else if (args.Data.Hamama.Trim() == null)
            {
                args.Cell.AddClass(new string[] { "null" });
            }
        }
    }
}
<style>
    .magash-180 {
        background-color: plum;
    }

    .magash-187 {
        background-color: lightyellow;
    }

    .magash-442 {
        background-color: grey;
        font-weight: bold;
    }

    .magash-308 {
        background-color: darkseagreen;
        font-weight: bold;
    }

    .passport {
        background-color: powderblue;
        font-weight: bold;
        color: red;
    }

    .hamama1 {
        background-color: cornflowerblue;
        font-weight: bold;
    }

    .hamama2 {
        background-color: yellow;
        font-weight: bold;
    }

    .hamama4 {
        background-color: darkseagreen;
        font-weight: bold;
    }

    .hamama5 {
        background-color: gray;
        font-weight: bold;
    }

    .hamama6 {
        background-color: cadetblue;
        font-weight: bold;
    }

    .hamama7 {
        background-color: palevioletred;
        font-weight: bold;
    }


    #toast_default .e-toast-container {
        color: black;
        font-size: 13px;
        font-weight: normal;
    }

    /*   GRID ROW STYLE*/
    .is-need-to-be-audit {
        background-color: floralwhite;
    }

    .clean {
        background-color: white;
    }

    .form-group.col-md-6 {
        width: 200px;
    }

    label.e-float-text {
        position: relative;
        padding-left: 0;
        top: 10%;
    }

    .e-toast-container .e-toast .e-toast-message .e-toast-content {
        color: white;
        font-size: 18px;
        font-weight: normal;
    }

    .e-toast-container .e-toast {
        background-color: black;
    }
</style>