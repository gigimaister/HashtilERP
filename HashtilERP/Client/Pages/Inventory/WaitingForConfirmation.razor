@page "/inventory/WaitingForConfirmation"
@inject IJSRuntime jsRuntime


@using Microsoft.AspNetCore.Authorization
@using ZXingBlazor.Components
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Spinner
@using HashtilERP.Shared.Models
@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager NavigationManager
@inject HttpClient Http

@attribute [Authorize(Roles = "Administrator,Manager-GreenHouse,AuditAvgCounter,Viewer")]

<h3 style="text-align:center">ממתינים לאישור</h3>

@if (K_Passports == null)
{
    <div class="col-sm">
        <div class="spin-row">
            `
            <SfSpinner Size="40" Label="" Type="SpinnerType.Bootstrap4" CssClass="e-customClass" Visible="true"></SfSpinner>
        </div>
    </div>
}
@{
    var Tool = (new List<string>() { "Search" });
}
@*GRID SECTION START HERE*@
<SfGrid DataSource="@K_Passports" AllowGrouping="false" Toolbar=@Tool AllowSorting="true" AllowResizing="true" AllowFiltering="true" EnableRtl="true">
    <GridEvents TValue="K_Passport"></GridEvents>
    <GridEvents CommandClicked="OnCommandClicked"
                TValue="K_Passport">
    </GridEvents>
    <GridFilterSettings Type="FilterType.CheckBox"></GridFilterSettings>
    <GridColumns>
        <GridColumn HeaderText="" TextAlign="TextAlign.Left" Width="150">
            <GridCommandColumns>
                <AuthorizeView Roles="Administrator,Manager-GreenHouse,AuditAvgCounter">
                    <GridCommandColumn Type=CommandButtonType.None
                                       ButtonOption="@(new CommandButtonOptions() { Content = "אישור" ,CssClass="e-success"})">
                    </GridCommandColumn>
                </AuthorizeView>
            </GridCommandColumns>
        </GridColumn>
        <GridColumn Field=@nameof(K_Passport.PassportNum) HeaderText="פספורט" HeaderTextAlign="TextAlign.Right" Type="ColumnType.Number" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.Hamama) HeaderText="חממה" HeaderTextAlign="TextAlign.Right" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.Gamlon) HeaderText="גמלון" HeaderTextAlign="TextAlign.Right" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field="Passport.Oitm.UHebGidul" HeaderText="גידול" HeaderTextAlign="TextAlign.Right" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.Zan) HeaderText="זן" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true">
            <Template>
                @{
                    var value = (context as K_Passport);
                    var Zan = value.Passport.UZanZl != null ? value.Passport.UZanZl : value.Passport.Oitm.UHebZan;
                    <b>@Zan</b>
                }
            </Template>
        </GridColumn>
        <GridColumn Field=@nameof(K_Passport.PassportAge) HeaderText="גיל" HeaderTextAlign="TextAlign.Right" Type="ColumnType.Number" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.MagashAmount) HeaderText="מגשים" HeaderTextAlign="TextAlign.Right" Type="ColumnType.Number" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.PassportStatus) HeaderText="סטטוס" HeaderTextAlign="TextAlign.Right" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field="Passport.Oitm.UCelsTray" HeaderText="סוג מגש" HeaderTextAlign="TextAlign.Right" Format="N3" Type="ColumnType.Number" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>


    </GridColumns>
</SfGrid>
@*Confirm Dialog Setting*@
<SfDialog Target="#target"
          Width="100px"
          Height="130px"
          IsModal="true"
          ShowCloseIcon="false"
          @bind-Visible="DeleteRecordConfirmVisibility">
    <DialogTemplates>
        <Header>?לאשר פספורט</Header>
        <Content>
            <div class="button-container">
                <button type="submit" style="margin-right:25px"
                        class="btn btn-danger"
                        @onclick="ConfirmDeleteNo">
                    ביטול
                </button>
                <button type="submit"
                        class="btn btn-success"
                        @onclick="ConfirmDeleteYes">
                    אישור
                </button>
            </div>
        </Content>
    </DialogTemplates>
</SfDialog>


@*Toast Component*@
<SfToast @ref="ToastObj" Title="" Timeout=3000 Icon="e-meeting" Content="@ToastContent" EnableRtl="true">
    <ToastPosition X="Center"></ToastPosition>

</SfToast>

@code{

    public K_Passport K_Passport = new K_Passport();
    public K_Passport[] K_Passports;
    private HubConnection hubConnection;

    private static string HebSaved = "נשמר!";

    //TOAST
    SfToast ToastObj;
    private string ToastContent { get; set; } = "";
    private async Task ShowToast()
    {
        await this.ToastObj.Show();
    }

    private async Task HideToast()
    {
        await this.ToastObj.Hide("All");
    }



    // Property to control the delete dialog.
    public bool DeleteRecordConfirmVisibility { get; set; } = false;

    //INITIALIZED
    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
    .WithUrl(NavigationManager.ToAbsoluteUri("/broadcastHub"))
    .Build();

        hubConnection.On("ReceiveMessage", () =>
        {
            CallLoadData();
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        await LoadData();
    }

    private void CallLoadData()
    {
        Task.Run(async () =>
        {
            await LoadData();
        });
    }

    protected async Task LoadData()
    {
        try
        {
            K_Passports = await Http.GetFromJsonAsync<K_Passport[]>("api/KPassports/multi/" + "2");
            StateHasChanged();
        }

        catch (Exception e)
        {
            throw new Exception(e.Message);
        }
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    Task SendMessage() => hubConnection.SendAsync("SendMessage");

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }


    //Command Button Clicked In grid
    public async void OnCommandClicked(CommandClickEventArgs<K_Passport> args)
    {
        if (args.CommandColumn.ButtonOption.Content == "אישור")
        {

            var PassportNumber = args.RowData.PassportNum.ToString();
            try
            {
                K_Passport = await Http.GetFromJsonAsync<K_Passport>("api/KPassports/Thai/GreenHouse/" + PassportNumber);
            }
            catch (Exception e)
            {
                ToastContent = e.Message;
                await ShowToast();
            }
            this.DeleteRecordConfirmVisibility = true;
            StateHasChanged();
        }

    }
    //DIALOG CANCEL
    public void ConfirmDeleteNo()
    {
        // Open the dialog
        // to give the user a chance
        // to confirm they want to delete the record.
        this.DeleteRecordConfirmVisibility = false;
    }

    //DIALOG CONFIRMED
    public async void ConfirmDeleteYes()
    {
        this.DeleteRecordConfirmVisibility = false;
        K_Passport.PassportStatus = Status.InGreenHouse;
        var rslt = await Http.PutAsJsonAsync("api/KPassports/GreenManager/Passport/UpdateStatus/" + K_Passport.K_PassportId, K_Passport);
        var content = await rslt.Content.ReadAsStringAsync();
        if (rslt.IsSuccessStatusCode)
        {

            if (IsConnected) await SendMessage();
            ToastContent = HebSaved;
            StateHasChanged();
            await ShowToast();
        }
        this.DeleteRecordConfirmVisibility = false;

    }

}