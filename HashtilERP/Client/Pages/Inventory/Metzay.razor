@page "/inventory/Metzay"
@inject IJSRuntime jsRuntime


@using Microsoft.AspNetCore.Authorization
@using ZXingBlazor.Components
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Spinner
@using HashtilERP.Shared.Models
@using Syncfusion.Blazor.Inputs
@using Microsoft.AspNetCore.SignalR.Client
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Data

@inject NavigationManager NavigationManager
@inject HttpClient Http

@attribute [Authorize(Roles = "Administrator,Viewer,Manager-GreenHouse,Manager-Oren,AuditAvgCounter,Manager-Drivers")]

<h3 style="text-align:center">מצאי</h3>

@if (K_Passports == null)
{
    <div class="col-sm">
        <div class="spin-row">
            <SfSpinner Size="40" Label="" Type="SpinnerType.Bootstrap4" CssClass="e-customClass" Visible="true"></SfSpinner>
        </div>
    </div>
}
@*Toast Component*@
<SfToast @ref="ToastObj" ID="toast_default" Title="" Timeout=3000 Icon="e-meeting" EnableRtl="true" Content="@ToastContent">
    <ToastPosition X="Center"></ToastPosition>
</SfToast>


@{
    var Tool = (new List<string>() { "Search" });
}
@*GRID SECTION START HERE*@
<SfGrid DataSource="@K_Passports" @ref="@SfGrid" Toolbar=@Tool AllowGrouping="true" AllowSorting="true" AllowResizing="true">
    <GridEditSettings AllowEditing="true" Mode="EditMode.Dialog">
        <HeaderTemplate>
            <div style="text-align:right">
                פספורט: @((context as K_Passport).PassportNum) <br />
                @((context as K_Passport).Passport.Oitm.UHebGidul)
                @((context as K_Passport).Passport.Oitm.UHebZan)
            </div>
        </HeaderTemplate>
        <Template>
            @{
                var Passport = (context as K_Passport);

                <div class="form-row" dir="rtl">
                    <div class="form-group col-md-5">
                        <label class="e-float-text e-label-top" style="text-align:right">חממה</label>
                        <SfDropDownList TItem="GreenHouseToGamlon.Hamama" TValue="string" AllowFiltering="true"
                                        PopupHeight="auto" DataSource="@GreenHouseToGamlon.Hamamas" Placeholder="@Passport.Hamama"
                                        @bind-Value="@Passport.Hamama">
                            <DropDownListEvents TItem="GreenHouseToGamlon.Hamama" TValue="string"
                                                ValueChange="ChangeCountry">

                            </DropDownListEvents>
                            <DropDownListFieldSettings Text="HamamaName" Value="HamamaId"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </div>
                </div>
                <div class="form-row" dir="rtl">
                    <div class="form-group col-md-5">
                        <label class="e-float-text e-label-top" style="text-align:right">גמלון</label>
                        <SfDropDownList Enabled="@EnableStateDropDown" TValue="string" TItem="GreenHouseToGamlon.Gamlonim"
                                        AllowFiltering="true" @bind-Value="@Passport.Gamlon" Placeholder="@Passport.Gamlon"
                                        PopupHeight="auto" DataSource="@GreenHouseToGamlon.AllGamlonim">
                            <DropDownListEvents TItem="GreenHouseToGamlon.Gamlonim" TValue="string">

                            </DropDownListEvents>
                            <DropDownListFieldSettings Text="gamlon" Value="gamlon"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </div>
                </div>
                <div class="form-row" dir="rtl">
                    <div class="form-group col-md-6">
                        <label class="e-float-text e-label-top" style="text-align:right">מגשים</label>
                        <SfNumericTextBox ID="Freight" @bind-Value="@(Passport.MagashAmount)" TValue="int?" EnableRtl="true"></SfNumericTextBox>
                    </div>
                </div>

            }

        </Template>
        <FooterTemplate>
            <button class="btn btn-danger" @onclick="@(_ => {CloseUpdateDialog();})" style="margin-left:10px">ביטול</button>
            <button class="btn btn-success" @onclick="@(_ => { if (context != null) UpdatePassport((context as K_Passport));})">שמירה</button>
        </FooterTemplate>
    </GridEditSettings>

    <GridEvents TValue="K_Passport"></GridEvents>
    <GridEvents QueryCellInfo="CustomizeCell" OnActionBegin="ActionBegin" RowDataBound="RowBound" CommandClicked="OnCommandClicked" TValue="K_Passport"></GridEvents>

    <GridTemplates>

        <DetailTemplate>

            <div style="text-align:right;width:auto">
                <SfTab HeaderPlacement="HeaderPosition.Top">
                    <TabItems>
                        <TabItem>
                            <ChildContent>
                                <TabHeader Text="לקוחות"></TabHeader>
                            </ChildContent>

                            <ContentTemplate>
                                @{ var passport = (context as K_Passport);
                                    <table class="table table-striped table-hover" style="text-align:right">
                                        <thead>
                                            <tr>
                                                <th>
                                                    לקוח
                                                </th>
                                                <th>
                                                    הזמנה
                                                </th>

                                            </tr>
                                        </thead>
                                        <tbody>

                                            @foreach (var cx in passport.Passport.Passprods)
                                            {
                                                var temp = (cx.UQuantity * 1000);
                                                var display = string.Format("{0:#,0}", temp);
                                                <tr>
                                                    <td>
                                                        @cx.UCustName
                                                    </td>
                                                    <td>
                                                        @display
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                }
                            </ContentTemplate>
                        </TabItem>
                        <TabItem>
                            <ChildContent>
                                <TabHeader Text="היסטוריית עריכה"></TabHeader>
                            </ChildContent>
                            <ContentTemplate>
                                @{ var passport2 = (context as K_Passport);
                                    <table class="table table-striped table-hover" style="text-align:right">
                                        <thead>
                                            <tr>
                                                <th>
                                                    תאריך
                                                </th>
                                                <th>
                                                    נערכה ע"י
                                                </th>
                                                <th>
                                                    תיאור
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var updateAudit in passport2.k_PassportAuditTblVer2s.OrderByDescending(x => x.Date))
                                            {

                                                <tr>
                                                    <td>
                                                        @updateAudit.Date
                                                    </td>
                                                    <td>
                                                        @updateAudit.UserName
                                                    </td>
                                                    <td>
                                                        @updateAudit.AuditString
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                }
                            </ContentTemplate>
                        </TabItem>
                        <TabItem>
                            <ChildContent>
                                <TabHeader Text="הערות"></TabHeader>
                            </ChildContent>
                            <ContentTemplate>
                                @{ var passport1 = (context as K_Passport);
                                    <table class="table table-striped table-hover" style="text-align:right">
                                        <thead>
                                            <tr>
                                                <th>
                                                    תאריך
                                                </th>
                                                <th>
                                                    נוספה ע"י
                                                </th>
                                                <th>
                                                    מצב
                                                </th>
                                                <th>
                                                    תיאור
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>

                                            @foreach (var form in passport1.PassportAuditForms.OrderByDescending(x => x.CreateDate))
                                            {
                                                if (passport1.PassportAuditForms.Count == 0)
                                                {
                                                    <tr>
                                                        <td>
                                                            אין
                                                        </td>
                                                        <td>
                                                            אין
                                                        </td>
                                                        <td>
                                                            אין
                                                        </td>
                                                        <td>
                                                            אין
                                                        </td>
                                                    </tr>
                                                }
                                                else
                                                {
                                                    <tr>
                                                        <td>
                                                            @form.CreateDate
                                                        </td>
                                                        <td>
                                                            @form.UserName
                                                        </td>
                                                        <td>
                                                            @form.AuditStatus
                                                        </td>
                                                        <td>
                                                            @form.Remark
                                                        </td>
                                                    </tr>
                                                }
                                            }
                                        </tbody>
                                    </table>
                                }
                            </ContentTemplate>
                        </TabItem>
                    </TabItems>
                </SfTab>
            </div>
        </DetailTemplate>

    </GridTemplates>
    <GridColumns>
        <AuthorizeView Roles="Administrator,Manager-GreenHouse,Manager-Oren,AuditAvgCounter">
            <GridColumn HeaderText="" TextAlign="TextAlign.Left" AutoFit="true">
                <GridCommandColumns>
                    <GridCommandColumn Type=CommandButtonType.None
                                       ButtonOption="@(new CommandButtonOptions() { Content = "השמדה", CssClass = "e-danger" })">
                    </GridCommandColumn>
                    <GridCommandColumn Type=CommandButtonType.None
                                       ButtonOption="@(new CommandButtonOptions() { Content = "ביקורת", CssClass = "e-primary" })">
                    </GridCommandColumn>
                    <GridCommandColumn Type=CommandButtonType.Edit
                                       ButtonOption="@(new CommandButtonOptions() { Content = "עריכה", CssClass = "e-warning" })">
                    </GridCommandColumn>
                </GridCommandColumns>
            </GridColumn>
        </AuthorizeView>
        <GridColumn Field=@nameof(K_Passport.K_PassportId) HeaderText="" HeaderTextAlign="TextAlign.Right" Type="ColumnType.Number" IsPrimaryKey="true" Visible="false" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.Hamama) HeaderText="חמ'" HeaderTextAlign="TextAlign.Right" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.Gamlon) HeaderText="גמ'" HeaderTextAlign="TextAlign.Right" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.PassportNum) HeaderText="פספורט" AllowEditing="false" HeaderTextAlign="TextAlign.Right" Type="ColumnType.Number" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.PassportStatus) HeaderText="סטטוס" AllowEditing="false" HeaderTextAlign="TextAlign.Right" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.PassportCondition) HeaderText="מצב" AllowEditing="false" HeaderTextAlign="TextAlign.Right" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field="Passport.Oitm.UHebGidul" HeaderText="גידול" AllowEditing="false" HeaderTextAlign="TextAlign.Right" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field="Passport.Oitm.UHebZan" HeaderText="זן" AllowEditing="false" HeaderTextAlign="TextAlign.Right" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.SowDate) HeaderText="ת.זריעה" AllowEditing="false" HeaderTextAlign="TextAlign.Right" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field="Passport.UDateEnd" HeaderText="ת.הוצאה" AllowEditing="false" HeaderTextAlign="TextAlign.Right" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.PassportAge) HeaderText="גיל" AllowEditing="false" HeaderTextAlign="TextAlign.Right" Type="ColumnType.Number" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.MagashAmount) HeaderText="מגשים" HeaderTextAlign="TextAlign.Right" Type="ColumnType.Number" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field="@nameof(K_Passport.PlantsAmount)" HeaderText="שתילים" AllowEditing="false" HeaderTextAlign="TextAlign.Right" Format="N3" Type="ColumnType.Number" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field="Passport.Oitm.UCelsTray" HeaderText="סוג מגש" AllowEditing="false" HeaderTextAlign="TextAlign.Right" Format="N3" Type="ColumnType.Number" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>


    </GridColumns>

</SfGrid>

@*Confirm Dialog Setting*@
<SfDialog Target="#target"
          Width="250px"
          Height="350px"
          IsModal="true"
          ShowCloseIcon="false"
          @bind-Visible="DeleteRecordConfirmVisibility">
    <DialogTemplates>
        <Header>ביקורת חדשה</Header>
        <Content>
            <EditForm Model="@PassportAuditForm">
                <DataAnnotationsValidator />
                <div style="text-align:right">
                    <SfDropDownList TValue="string" TItem="AuditFormStatus" Placeholder="מצב" Width="auto" DataSource="@AuditFormStatus.Statuses"
                                    PopupHeight="350px" PopupWidth="200px" @bind-Value="@PassportAuditForm.AuditStatus">
                        <DropDownListFieldSettings Value="Text" Text="Text">

                        </DropDownListFieldSettings>
                    </SfDropDownList>
                    <ValidationMessage For="@(() => PassportAuditForm.AuditStatus)"></ValidationMessage>
                </div>
                <br />
                <div style="text-align:right">
                    <SfTextBox Placeholder='הערה' Multiline=true @bind-Value="@PassportAuditForm.Remark" Width="194px"></SfTextBox>
                    <ValidationMessage For="@(() => PassportAuditForm.Remark)"></ValidationMessage>
                </div>
                <br />
                <div class="button-container" style="text-align:center">
                    <button type="submit" style="margin-right:25px"
                            class="btn btn-danger"
                            @onclick="ConfirmDeleteNo">
                        ביטול
                    </button>
                    <button type="submit"
                            class="btn btn-success"
                            @onclick="ConfirmDeleteYes">
                        אישור
                    </button>
                </div>
            </EditForm>
        </Content>
    </DialogTemplates>
</SfDialog>

@*Update Passport Hamama And Or Gamlon NULL Dialog Setting*@
<SfDialog Width="250px" IsModal="true" @bind-Visible="@IsVisible" EnableRtl="true">
    <DialogEvents OnOverlayClick="@OnOverlayclick">
    </DialogEvents>
    <DialogTemplates>
        <Header>שגיאה!</Header>
        <Content> @ModalError </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="אישור" IsPrimary="true" OnClick="@CloseDialog" />

    </DialogButtons>
</SfDialog>

@*Destroy Passport Dialog Setting*@
<SfDialog Target="#target" EnableRtl="true"
          Width="250px"
          Height="175px"
          IsModal="true"
          ShowCloseIcon="false"
          @bind-Visible="@DestroyVisability">
    <DialogTemplates>
        <Header>להשמיד פספורט?</Header>
        <Content>
            <div class="button-container">
                <button type="submit" style="margin-right:25px"
                        class="btn btn-danger"
                        @onclick="ConfirmDestroyNo">
                    ביטול
                </button>
                <button type="submit"
                        class="btn btn-success"
                        @onclick="ConfirmDestroyYes">
                    אישור
                </button>
            </div>
        </Content>
    </DialogTemplates>
</SfDialog>

@code {

    SfGrid<K_Passport> SfGrid;
    public void CloseUpdateDialog()
    {
        this.SfGrid.CloseEdit();
    }
    public async void UpdatePassport(K_Passport context)
    {
        if (context.Hamama != null && context.Gamlon != null)
        {

            var rslt = await Http.PutAsJsonAsync($"api/KPassports/{context.K_PassportId}", context);
            //Http Response Failed On Insert
            if (!rslt.IsSuccessStatusCode)
            {

                ToastContent = rslt.StatusCode.ToString();
                StateHasChanged();
                await ShowToast();

            }
            else
            {


                if (IsConnected) await SendMessage();
                ToastContent = HebSaved;
                StateHasChanged();
                await ShowToast();

            }
        }
        else
        {
            ModalError = "יש להזין חממה וגמלון";
            OpenDialog();
        }

    }
    string Hamama, Gamlon;

    #region MODAL Hamama Gamlon NULL
    /// <summary>
    /// Modal Props and actions
    /// </summary>
    private bool IsVisible { get; set; } = false;

    //DESTROY MODAL VISABILITY
    private bool DestroyVisability { get; set; } = false;

    private string ModalError { get; set; } = "";

    private void OpenDialog()
    {
        this.IsVisible = true;
    }

    private void OnOverlayclick(MouseEventArgs arg)
    {
        this.IsVisible = false;
    }
    private void CloseDialog()
    {
        this.IsVisible = false;
    }
    #endregion

    #region DROPDOWN
    //2 DROPLIST HAMAMA AND GAMLON SETTINGS
    public bool EnableStateDropDown = true;
    public bool EnableCitytDropDown = false;
    public string StateValue { get; set; } = null;
    public Query StateQuery { get; set; } = null;
    public string CityValue { get; set; } = null;
    public Query CityQuery { get; set; } = null;



    public void ChangeCountry(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, GreenHouseToGamlon.Hamama> args)
    {

        this.EnableStateDropDown = true;
        this.StateQuery = new Query().Where(new WhereFilter() { Field = "HamamaId", Operator = "equal", value = args.Value, IgnoreCase = false, IgnoreAccent = false });
        this.StateValue = null;
        this.CityValue = null;



    }

    public void ChangeState(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, GreenHouseToGamlon.Gamlons> args)
    {
        this.EnableCitytDropDown = true;
        this.CityQuery = new Query().Where(new WhereFilter() { Field = "GamlonId", Operator = "equal", value = args.Value, IgnoreCase = false, IgnoreAccent = false });
        this.CityValue = null;
    }
    //END DROPDOWN SETTINGS
    #endregion

    #region TOAST
    //TOAST
    public SfToast ToastObj;
    private string ToastContent { get; set; } = "";
    private async Task ShowToast()
    {
        await this.ToastObj.Show();
    }

    private async Task HideToast()
    {
        await this.ToastObj.Hide("All");
    }
    #endregion

    public K_Passport K_Passport = new K_Passport();
    public K_Passport[] K_Passports;
    public PassportAuditForm PassportAuditForm = new PassportAuditForm();
    private HubConnection hubConnection;
    private static string HebSaved = "נשמר!";
    long passporrtId;


    //CheckBox Selected Default Property
    private bool isChecked = true;

    // Property to control the delete dialog.
    public bool DeleteRecordConfirmVisibility { get; set; } = false;


    //Command Button Clicked In grid
    public void OnCommandClicked(CommandClickEventArgs<K_Passport> args)
    {
        if (args.CommandColumn.ButtonOption.Content == "ביקורת")
        {
            this.DeleteRecordConfirmVisibility = true;
            passporrtId = args.RowData.K_PassportId;
            PassportAuditForm.K_PassportId = Convert.ToInt32(passporrtId);
            PassportAuditForm.CreateDate = DateTime.Now;

        }
        if (args.CommandColumn.ButtonOption.Content == "השמדה")
        {
            this.DestroyVisability = true;
            passporrtId = args.RowData.K_PassportId;

        }

    }

    //DIALOG Destroy CANCEL
    public void ConfirmDestroyNo()
    {
        this.DestroyVisability = false;
    }

    //DIALOG Destroy CONFIRMED
    public async void ConfirmDestroyYes()
    {
        try
        {
            K_Passport = await Http.GetFromJsonAsync<K_Passport>("api/KPassports/" + passporrtId);
            K_Passport.PassportStatus = Status.Destroyed;

            var rslt = await Http.PutAsJsonAsync($"api/KPassports/Thai/Passport/Update/{passporrtId}", K_Passport);
            this.DestroyVisability = false;

            if (rslt.IsSuccessStatusCode)
            {

                if (IsConnected) await SendMessage();
                ToastContent = HebSaved;
                StateHasChanged();
                await ShowToast();
                PassportAuditForm = new PassportAuditForm();
            }


        }
        catch (Exception e)
        {
            ToastContent = e.Message;
            await ShowToast();
        }




    }

    //DIALOG AuditForm CANCEL
    public void ConfirmDeleteNo()
    {
        // Open the dialog
        // to give the user a chance
        // to confirm they want to delete the record.
        PassportAuditForm = new PassportAuditForm();
        this.DeleteRecordConfirmVisibility = false;
    }

    //DIALOG CONFIRMED
    public async void ConfirmDeleteYes()
    {
        try
        {
            K_Passport = await Http.GetFromJsonAsync<K_Passport>("api/KPassports/" + passporrtId);
            if (PassportAuditForm.AuditStatus != "תקין")
            {
                K_Passport.IsNeedToBeAudit = true;

            }
            else
            {
                K_Passport.IsNeedToBeAudit = false;
            }
            K_Passport.PassportCondition = PassportAuditForm.AuditStatus;
            await Http.PutAsJsonAsync($"api/KPassports/Thai/Passport/Update/{passporrtId}", K_Passport);
            this.DeleteRecordConfirmVisibility = false;
            var rslt = await Http.PostAsJsonAsync("api/PassportAuditForm", PassportAuditForm);
            var content = await rslt.Content.ReadAsStringAsync();
            if (rslt.IsSuccessStatusCode)
            {

                if (IsConnected) await SendMessage();
                ToastContent = HebSaved;
                StateHasChanged();
                await ShowToast();
                PassportAuditForm = new PassportAuditForm();
            }


        }
        catch (Exception e)
        {
            ToastContent = e.Message;
            await ShowToast();
        }




    }

    //INITIALIZED
    protected override async Task OnInitializedAsync()
    {
        PassportAuditForm = new PassportAuditForm();
        hubConnection = new HubConnectionBuilder()
.WithUrl(NavigationManager.ToAbsoluteUri("/broadcastHub"))
.Build();

        hubConnection.On("ReceiveMessage", () =>
        {
            CallLoadData();
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        await LoadData();
    }

    private void CallLoadData()
    {
        Task.Run(async () =>
        {
            await LoadData();
        });
    }

    protected async Task LoadData()
    {
        try
        {
            K_Passports = await Http.GetFromJsonAsync<K_Passport[]>("api/KPassports/multi/" + "3");
            StateHasChanged();
        }

        catch (Exception e)
        {
            throw new Exception(e.Message);
        }
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    Task SendMessage() => hubConnection.SendAsync("SendMessage");

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }


    //CELL MAGASH TYPE STYLE
    public void CustomizeCell(QueryCellInfoEventArgs<K_Passport> args)
    {
        if (args.Column.Field == "Passport.Oitm.UCelsTray")
        {
            if (Convert.ToDouble(args.Data.Passport.Oitm.UCelsTray) == 0.180)
            {
                args.Cell.AddClass(new string[] { "magash-180" });
            }
            else if (Convert.ToDouble(args.Data.Passport.Oitm.UCelsTray) == 0.187)
            {
                args.Cell.AddClass(new string[] { "magash-187" });
            }
            else if (Convert.ToDouble(args.Data.Passport.Oitm.UCelsTray) == 0.442)
            {
                args.Cell.AddClass(new string[] { "magash-442" });
            }
            else
            {
                args.Cell.AddClass(new string[] { "magash-308" });
            }
        }
        ////PASSPORT STYLE
        //if (args.Column.Field == "PassportNum")
        //{
        //    args.Cell.AddClass(new string[] { "passport" });
        //}
        //HAMAMA STYLE
        if (args.Column.Field == "Hamama")
        {
            if (args.Data.Hamama.Trim() == "1")
            {
                args.Cell.AddClass(new string[] { "hamama1" });
            }
            else if (args.Data.Hamama.Trim() == "2")
            {
                args.Cell.AddClass(new string[] { "hamama2" });
            }
            else if (args.Data.Hamama.Trim() == "4")
            {
                args.Cell.AddClass(new string[] { "hamama4" });
            }
            else if (args.Data.Hamama.Trim() == "5")
            {
                args.Cell.AddClass(new string[] { "hamama5" });
            }
            else if (args.Data.Hamama.Trim() == "6")
            {
                args.Cell.AddClass(new string[] { "hamama6" });
            }
            else if (args.Data.Hamama.Trim() == "7")
            {
                args.Cell.AddClass(new string[] { "hamama7" });
            }
        }
    }

    //ROW IsNeedToBeAudit STYLE
    public void RowBound(RowDataBoundEventArgs<K_Passport> args)
    {
        if (args.Data.IsNeedToBeAudit == true)
        {
            args.Row.AddClass(new string[] { "is-need-to-be-audit" });
        }



    }

    public void ActionBegin(ActionEventArgs<K_Passport> arg)
    {
        //Handles add operation


        //Handles edit operation. During edit operation, original object will be cloned.
        if (arg.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {

        }
    }
}

<style>
    .magash-180 {
        background-color: plum;
    }

    .magash-187 {
        background-color: lightyellow;
    }

    .magash-442 {
        background-color: grey;
        font-weight: bold;
    }

    .magash-308 {
        background-color: darkseagreen;
        font-weight: bold;
    }

    .passport {
        background-color: powderblue;
        font-weight: bold;
    }

    .hamama1 {
        background-color: cornflowerblue;
        font-weight: bold;
    }

    .hamama2 {
        background-color: yellow;
        font-weight: bold;
    }

    .hamama4 {
        background-color: darkseagreen;
        font-weight: bold;
    }

    .hamama5 {
        background-color: gray;
        font-weight: bold;
    }

    .hamama6 {
        background-color: cadetblue;
        font-weight: bold;
    }

    .hamama7 {
        background-color: palevioletred;
        font-weight: bold;
    }


    #toast_default .e-toast-container {
        color: black;
        font-size: 13px;
        font-weight: normal;
    }

    /*   GRID ROW STYLE*/
    .is-need-to-be-audit {
        background-color: orange;
    }

    .clean {
        background-color: white;
    }

    .form-group.col-md-6 {
        width: 200px;
    }

    label.e-float-text {
        position: relative;
        padding-left: 0;
        top: 10%;
    }
</style>