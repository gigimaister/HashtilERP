@page "/inventory/growingrooms"
@inject IJSRuntime jsRuntime


@using Microsoft.AspNetCore.Authorization
@using ZXingBlazor.Components
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Spinner
@using HashtilERP.Shared.Models
@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager NavigationManager
@inject HttpClient Http

@attribute [Authorize(Roles = "Administrator,Viewer,Manager-GreenHouse,Agronomist,AuditAvgCounter")]
    <div style="text-align:right" class="alert alert-info" role="alert">
        <h3 style="text-align:center">חדרי הנבטה</h3>
    </div>


@if (GrowPassports == null)
{
<div class="col-sm">
    <div class="spin-row">
        <SfSpinner Size="40" Label="" Type="SpinnerType.Bootstrap4" CssClass="e-customClass" Visible="true"></SfSpinner>
    </div>
</div> 
}

@*GRID SECTION START HERE*@
<SfGrid DataSource="@GrowPassports"  FrozenRows="0" Height="500" Width="100%" AllowGrouping="false" AllowSorting="true" EnableRtl="true" AllowResizing="true" AllowFiltering="true">
    <GridEvents TValue="K_Passport" RowDataBound="RowBound"></GridEvents>
    <GridFilterSettings Type="FilterType.Excel"></GridFilterSettings>
    <GridTemplates>
        <DetailTemplate>
            @{ var passport = (context as K_Passport);

                <div class="form-row" style="width:15rem" dir="rtl">
                    <div class="col-form-label" style="text-align:right">
                        הוכנסה ע"י: @passport.KPassportInsertAudit.UserName
                    </div>
                    <div class="col-form-label" style="text-align:right">
                        <h5 class="card-title">ב:@passport.KPassportInsertAudit.Date</h5>
                    </div>
                </div>

            }

            @{
                var passport2 = (context as K_Passport);
                <table class="table table-striped table-hover" style="text-align:right;width:auto">
                    <thead>
                                    <tr>
                                        <th>
                                            לקוח
                                        </th>
                                        <th>
                                            הזמנה
                                        </th>
                                        <th>
                                            מגשים
                                        </th>

                                    </tr>
                    </thead>
                    <tbody>

                        @foreach (var cx in passport.Passport.Passprods.OrderByDescending(x => x.UQuantity))
                        {
                            var temp = (cx.UQuantity * 1000);
                            var display = string.Format("{0:#,0}", temp);
                            var startAvg = Convert.ToInt32((passport.Passport.UQuanOrdP * 1000) / passport.Passport.UTraySow);
                            var magashPercx = (cx.UQuantity * 1000) / startAvg;
                            var magashPercxScreen = string.Format("{0:#,0}", magashPercx);
                            <tr>
                                <td>
                                    @cx.UCustName
                                </td>
                                <td>
                                    @display
                                </td>
                                <td>
                                    @magashPercxScreen
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }

        </DetailTemplate>
    </GridTemplates>
    <GridAggregates>
        <GridAggregate>
            <GridAggregateColumns>
                <GridAggregateColumn Field=@nameof(K_Passport.MagashAmount) Type="AggregateType.Count">
                    <FooterTemplate>
                        @{
                            var aggregate = (context as AggregateTemplateContext);

                            <b>ספירה: @aggregate.Count</b>

                        }
                    </FooterTemplate>
                </GridAggregateColumn>
            </GridAggregateColumns>
        </GridAggregate>
        <GridAggregate>
            <GridAggregateColumns>
                <GridAggregateColumn Field=@nameof(K_Passport.MagashAmount) Type="AggregateType.Sum">
                    <FooterTemplate>
                        @{
                            var aggregate = (context as AggregateTemplateContext);
                            <div>
                                <b>סכום: @aggregate.Sum</b>
                            </div>
                        }
                    </FooterTemplate>
                </GridAggregateColumn>
            </GridAggregateColumns>
        </GridAggregate>
    </GridAggregates>

    <GridColumns>
        <GridColumn Field=@nameof(K_Passport.K_PassportId) HeaderText="" HeaderTextAlign="TextAlign.Center" Type="ColumnType.Number" IsPrimaryKey="true" Visible="false" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.GrowingRoom) HeaderText="חדר הנבטה" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.GrowingRoomExitDay) HeaderText="יציאה לחממות" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.PassportNum) HeaderText="פספורט" Type="ColumnType.Number" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.PassportStatus) HeaderText="סטטוס" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.Gidul) HeaderText="גידול" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.Zan) HeaderText="זן" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.SowDate) HeaderText="ת.זריעה" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.DateEnd) HeaderText="ת.הוצאה" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.GrowingDays) HeaderText="ימי גידול" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.PassportAge) HeaderText="גיל" Type="ColumnType.Number" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.MagashAmount) HeaderText="מגשים" Type="ColumnType.Number" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.AutoPlantsCalc) HeaderText="שתילים" Type="ColumnType.Number" Format="N0" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Passport.CelsTray) HeaderText="סוג מגש" Format="N0" Type="ColumnType.Number" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
    </GridColumns>
</SfGrid>
@*Spinner Style*@
<style>
    .e-spinner-pane.e-customClass .e-spinner-inner .e-spin-material {
        stroke: #48EB43;
    }
</style>

@*//GRID ROW COND FORMAT COLOR STYLE*@
<style>
    .date-pass {
        background-color: lightcoral;
    }

    .below-35 {
        background-color: yellow;
    }

    .date-out {
        background-color: darkseagreen
    }
</style>

@code {
    public K_Passport GrowPassport = new K_Passport();
    public K_Passport[] GrowPassports;
    private HubConnection hubConnection;
    public DateTime GrowingRoomExit;




    //INITIALIZED
    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
    .WithUrl(NavigationManager.ToAbsoluteUri("/broadcastHub"))
    .Build();

        hubConnection.On("ReceiveMessage", () =>
        {
            CallLoadData();
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        await LoadData();
    }

    private void CallLoadData()
    {
        Task.Run(async () =>
        {
            await LoadData();
        });
    }

    protected async Task LoadData()
    {
        try
        {
            GrowPassports = await Http.GetFromJsonAsync<K_Passport[]>("api/KPassports/multi/" + "1");
            StateHasChanged();
        }

        catch (Exception e)
        {
            throw new Exception(e.Message);
        }
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }

    //ROW COLOR FORMAT
    public void RowBound(RowDataBoundEventArgs<K_Passport> args)
    {
        if (args.Data.GrowingRoomExitDay < DateTime.Today)
        {
            args.Row.AddClass(new string[] { "date-pass" });
        }
        else if (args.Data.GrowingRoomExitDay == DateTime.Today)
        {
            args.Row.AddClass(new string[] { "date-out" });
        }

    }

}
