@page "/inventory/needtocutt"
@inject IJSRuntime jsRuntime

@using System.Security.Claims;

@using Microsoft.AspNetCore.Authorization
@using ZXingBlazor.Components
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Spinner
@using HashtilERP.Shared.Models
@using Syncfusion.Blazor.Inputs
@using Microsoft.AspNetCore.SignalR.Client
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Data

@inject NavigationManager NavigationManager
@inject HttpClient Http

@attribute [Authorize(Roles = "Administrator,Viewer,Manager-GreenHouse,Agronomist,AuditAvgCounter,Manager-Oren,Manager-Drivers")]
<div style="text-align:right" class="alert alert-danger" role="alert">
    <h3 style="text-align:center">עגבניות לפיצול!!</h3>
</div>
@*For "Search" box inside greed*@
@{
    var Tool = (new List<string>() { "Search" });
}
@*GRID SECTION START HERE*@
<div>
    <SfGrid DataSource="@K_Passports" FrozenRows="0" AllowExcelExport="true" Toolbar=@Tool Height="800" Width="100%" AllowPaging="true" @ref="@SfGrid" AllowGrouping="false" AllowFiltering="true"
            AllowSorting="true" EnableRtl="true" AllowResizing="true">
        <GridEvents QueryCellInfo="CustomizeCell" CommandClicked="OnCommandClicked" TValue="K_Passport"></GridEvents>
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
        <GridPageSettings PageSize="40"></GridPageSettings>
        <GridTemplates>
            <DetailTemplate>
                <div style="text-align:right;width:auto">
                    <SfTab HeaderPlacement="HeaderPosition.Top">                     
                        <TabItems>
                            <TabItem>
                                <ChildContent>
                                    <TabHeader Text="לקוחות"></TabHeader>
                                </ChildContent>
                                <ContentTemplate>
                                    @{ var passport = (context as K_Passport);
                                        <table class="table table-striped table-hover" style="text-align:right;width:auto">
                                            <thead>
                                                <tr>
                                                    <th>
                                                        לקוח
                                                    </th>
                                                    <th>
                                                        הזמנה
                                                    </th>
                                                    <th>
                                                        מגשים
                                                    </th>
                                                    <th>
                                                        ת.הוצאה
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody>

                                                @foreach (var cx in passport.Passport.Passprods.OrderByDescending(x => x.UQuantity))
                                                {
                                                    decimal? temp;
                                                    int startAvg;
                                                    if (passport.Passport.UQuanOrdP > 5555554)
                                                    {
                                                        temp = passport.Passport.UQuanProd * 1000;
                                                        startAvg = Convert.ToInt32((passport.Passport.UQuanProd * 1000) / passport.Passport.UTraySow);
                                                    }
                                                    else
                                                    {
                                                        temp = (cx.UQuantity * 1000);
                                                        startAvg = Convert.ToInt32((passport.Passport.UQuanOrdP * 1000) / passport.Passport.UTraySow);
                                                    }

                                                    var display = string.Format("{0:#,0}", temp);
                                                    var magashPercx = temp / startAvg;
                                                    var magashPercxScreen = string.Format("{0:#,0}", magashPercx);
                                                    <tr>
                                                        <td>
                                                            @cx.UCustName
                                                        </td>
                                                        <td>
                                                            @display
                                                        </td>
                                                        <td>
                                                            @magashPercxScreen
                                                        </td>
                                                        <td>
                                                            @Convert.ToDateTime(cx.UDateSupp).ToShortDateString()
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    }
                                </ContentTemplate>
                            </TabItem>
                            <TabItem>
                                <ChildContent>
                                    <TabHeader Text="הערות"></TabHeader>
                                </ChildContent>
                                <ContentTemplate>
                                    @{ var passport1 = (context as K_Passport);
                                        <table class="table table-striped table-hover" style="text-align:right;width:auto">
                                            <thead>
                                                <tr>
                                                    <th>
                                                        תאריך
                                                    </th>
                                                    <th>
                                                        נוספה ע"י
                                                    </th>
                                                    <th>
                                                        מצב
                                                    </th>
                                                    <th>
                                                        תיאור
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody>

                                                @foreach (var form in passport1.PassportAuditForms.OrderByDescending(x => x.CreateDate))
                                                {


                                                    <tr>
                                                        <td>
                                                            @form.CreateDate
                                                        </td>
                                                        <td>
                                                            @form.UserName
                                                        </td>
                                                        <td>
                                                            @form.AuditStatus
                                                        </td>
                                                        <td>
                                                            @form.Remark
                                                        </td>
                                                    </tr>

                                                }
                                            </tbody>
                                        </table>
                                    }
                                </ContentTemplate>
                            </TabItem>
                            <TabItem>
                                <ChildContent>
                                    <TabHeader Text="היסטוריית עריכה"></TabHeader>
                                </ChildContent>
                                <ContentTemplate>
                                    @{ var passport2 = (context as K_Passport);
                                        <table class="table table-striped table-hover" style="text-align:right;width:auto">
                                            <thead>
                                                <tr>
                                                    <th>
                                                        תאריך
                                                    </th>
                                                    <th>
                                                        נערכה ע"י
                                                    </th>
                                                    <th>
                                                        תיאור
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var updateAudit in passport2.k_PassportAuditTblVer2s.OrderByDescending(x => x.Date))
                                                {

                                                    <tr>
                                                        <td>
                                                            @updateAudit.Date
                                                        </td>
                                                        <td>
                                                            @updateAudit.UserName
                                                        </td>
                                                        <td>
                                                            @updateAudit.AuditString
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    }
                                </ContentTemplate>
                            </TabItem>
                            <TabItem>
                                <ChildContent>
                                    <TabHeader Text="נתונים נוספים"></TabHeader>
                                </ChildContent>
                                <ContentTemplate>
                                    @{ var passport2 = (context as K_Passport);
                                        <div class="form-row" dir="rtl">
                                            <div class="col-form-label">
                                                @{ if (passport2.GrowingRoom == null || passport2.GrowingRoom == "X")
                                                    {
                                                        <label class="form-check-label" style="text-align: right; font-weight:500">הוכנס ישירות למצאי ע"י</label>
                                                    }
                                                    else
                                                    { <label class="form-check-label" style="text-align: right; font-weight:500">הוכנס לחדר הנבטה ע"י:</label>
                                                    }
                                                }
                                            </div>
                                            <div class="col-form-label">
                                                <label class="form-check-label" style="text-align:right;">@passport2.KPassportInsertAudit.UserName</label>
                                            </div>
                                            <div class="col-form-label">
                                                <label class="form-check-label" style="text-align:right;">@passport2.KPassportInsertAudit.Date</label>
                                            </div>
                                        </div>
                                        <div class="form-row" dir="rtl">
                                            <div class="col-form-label">
                                                <label class="form-check-label" style="text-align: right; font-weight:500">מקדם זריעה SAP:</label>
                                            </div>
                                            <div class="col-form-label">
                                                <label class="form-check-label" style="text-align:right">@passport2.PassportStartingAVG</label>
                                            </div>
                                        </div>
                                    }
                                </ContentTemplate>
                            </TabItem>
                        </TabItems>
                    </SfTab>
                </div>
            </DetailTemplate>

        </GridTemplates>

        <GridAggregates>
            <GridAggregate>
                <GridAggregateColumns>
                    <GridAggregateColumn Field=@nameof(K_Passport.PassportNum) Type="AggregateType.Count">
                        <FooterTemplate>
                            @{
                                var aggregate = (context as AggregateTemplateContext);

                                var num = Convert.ToInt32(aggregate.Count);
                                var magashNum = string.Format("{0:#,0}", num);
                                <b>ספירה:@magashNum</b>

                            }
                        </FooterTemplate>
                    </GridAggregateColumn>
                    <GridAggregateColumn Field=@nameof(K_Passport.MagashAmount) Type="AggregateType.Sum">
                        <FooterTemplate>
                            @{
                                var aggregate = (context as AggregateTemplateContext);
                                var num = Convert.ToInt32(aggregate.Sum);
                                var magashNum = string.Format("{0:#,0}", num);
                                <b>@magashNum</b>
                            }
                        </FooterTemplate>
                    </GridAggregateColumn>
                </GridAggregateColumns>
            </GridAggregate>
        </GridAggregates>

        <GridColumns>
            <GridColumn Field=@nameof(K_Passport.K_PassportId) HeaderText="" HeaderTextAlign="TextAlign.Center" Type="ColumnType.Number" IsPrimaryKey="true" Visible="false" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.Hamama) HeaderText="חמ'" HeaderTextAlign="TextAlign.Center" Type="ColumnType.Number" Format="N0" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.Gamlon) HeaderText="גמ'" HeaderTextAlign="TextAlign.Center" Type="ColumnType.String" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.PassportNum) HeaderText="פספורט" FilterSettings="@(new FilterSettings{Operator = Syncfusion.Blazor.Operator.Contains})" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.Number" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.Gidul) HeaderText="גידול" FilterSettings="@(new FilterSettings{Operator = Syncfusion.Blazor.Operator.Contains})" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.String" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.Zan) HeaderText="זן" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.String" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.SowDate) HeaderText="ת.זריעה" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.DateEnd) HeaderText="ת.הוצאה" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.GrowingDays) HeaderText="ימי גידול" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.Number" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.PassportAge) HeaderText="גיל" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.Number" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.MagashAmount) HeaderText="מגשים" HeaderTextAlign="TextAlign.Center" Type="ColumnType.Number" Format="N0" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field="@nameof(K_Passport.AutoPassportAVG)" HeaderText="ממוצע" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.String" TextAlign="TextAlign.Center">           </GridColumn>
            <GridColumn Field=@nameof(K_Passport.PassportStatus) HeaderText="סטטוס" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.String" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.PassportCondition) HeaderText="מצב" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.String" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field="@nameof(K_Passport.AutoPlantsCalc)" HeaderText="שתילים" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Format="N0" Type="ColumnType.Number" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.CelsTray) HeaderText="סוג מגש" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Format="N0" Type="ColumnType.Number" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn HeaderText="" TextAlign="TextAlign.Center">
                <GridCommandColumns>
                    <AuthorizeView Roles="Administrator,Manager-GreenHouse">
                        <GridCommandColumn Type=CommandButtonType.None
                                           ButtonOption="@(new CommandButtonOptions() { Content = "פוצל", CssClass = "e-warning" })">
                        </GridCommandColumn>
                    </AuthorizeView>
                </GridCommandColumns>
            </GridColumn>
        </GridColumns>

    </SfGrid>
</div>
@code {
    #region Grid Settings For Metzay Grid Without Editing
    //SPA Hub
    private HubConnection hubConnection;

    //Grid Object for custom actions
    SfGrid<K_Passport> SfGrid;

    //Objects list populate grid
    public List<K_Passport> K_Passports;

    //the Object type fot type grid and PUT calls
    public K_Passport K_Passport = new K_Passport();

    //CAMERA SCANNER for search in datagrid
    private string isDevice { get; set; }
    private bool mobile { get; set; }
    bool ShowScanBarcode { get; set; } = false;
    public int? BarCode { get; set; }
    string passportInput;

    //Check if userAgent is Pc Or Mobile
    public async Task FindResponsiveness()
    {
        mobile = await jsRuntime.InvokeAsync<bool>("isDevice");
        isDevice = mobile ? "Mobile" : "Desktop";

    }

    protected override async Task OnInitializedAsync()
    {

        await FindResponsiveness();
        await LoadData();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/broadcastHub"))
            .Build();

        hubConnection.On("ReceiveMessage", () =>
        {
            Task.Run(async () => { await LoadData(); });
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }


    //Get list Of K_Passport Objects
    protected async Task LoadData()
    {
        K_Passports = await Http.GetFromJsonAsync<List<K_Passport>>("api/KPassports/NeedToCutt");
        //StateHasChanged();
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    Task SendMessage() => hubConnection.SendAsync("SendMessage");

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }

    //Command Button Clicked In grid
    public void OnCommandClicked(CommandClickEventArgs<K_Passport> args)
    {
        //if (args.CommandColumn.ButtonOption.Content == "פוצל")
        //{
        //    K_Passport = PassportAlgorithm.ArgsToObject(args.RowData);
        //    ConfirmPassNumber = K_Passport.PassportNum.ToString();
        //    K_Passport.IsNeedToCut = false;
        //    DialogVisability = true;
        //}
    }



    //Search after Passport Scan
    public void SearchBtnHandler(string searchKey)
    {
        this.SfGrid.Search(searchKey);
    }

    //Clear Grid "Search" Box
    public void ClearGridSearch()
    {
        this.SfGrid.Search("");
    }
    //Clear Grid "Filter" Box
    public async void ClearGridfilter()
    {
        await this.SfGrid.ClearFiltering();
    }

    //CELL MAGASH TYPE STYLE
    public void CustomizeCell(QueryCellInfoEventArgs<K_Passport> args)
    {
        if (args.Column.Field == "CelsTray")
        {
            try
            {

                if (Convert.ToDouble(args.Data.CelsTray) == 180)
                {
                    args.Cell.AddClass(new string[] { "magash-180" });
                }
                else if (Convert.ToDouble(args.Data.CelsTray) == 187)
                {
                    args.Cell.AddClass(new string[] { "magash-187" });
                }
                else if (Convert.ToDouble(args.Data.CelsTray) == 442)
                {
                    args.Cell.AddClass(new string[] { "magash-442" });
                }
                else
                {
                    args.Cell.AddClass(new string[] { "magash-308" });
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                return;
            }
        }
        ////PASSPORT STYLE
        if (args.Column.Field == "PassportNum")
        {
            args.Cell.AddClass(new string[] { "passport" });
        }
        //LOW AVG
        if (args.Column.Field == "PassportAVG")
        {
            if (args.Data.IsLowAVG == true)
            {
                args.Cell.AddClass(new string[] { "is-low-avg" });
            }
        }

        //HAMAMA STYLE
        if (args.Column.Field == "Hamama")
        {
            if (args.Data.Hamama.Trim() == "1")
            {
                args.Cell.AddClass(new string[] { "hamama1" });
            }
            else if (args.Data.Hamama.Trim() == "2")
            {
                args.Cell.AddClass(new string[] { "hamama2" });
            }
            else if (args.Data.Hamama.Trim() == "3")
            {
                args.Cell.AddClass(new string[] { "hamama3" });
            }
            else if (args.Data.Hamama.Trim() == "4")
            {
                args.Cell.AddClass(new string[] { "hamama4" });
            }
            else if (args.Data.Hamama.Trim() == "5")
            {
                args.Cell.AddClass(new string[] { "hamama5" });
            }
            else if (args.Data.Hamama.Trim() == "6")
            {
                args.Cell.AddClass(new string[] { "hamama6" });
            }
            else if (args.Data.Hamama.Trim() == "7")
            {
                args.Cell.AddClass(new string[] { "hamama7" });
            }
            else if (args.Data.Hamama.Trim() == null)
            {
                args.Cell.AddClass(new string[] { "null" });
            }
        }
    }
    #endregion
}
