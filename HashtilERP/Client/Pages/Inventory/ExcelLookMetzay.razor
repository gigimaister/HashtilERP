@page "/inventory/excellookmetzay"
@inject IJSRuntime jsRuntime

@using Microsoft.AspNetCore.Authorization
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Spinner
@using HashtilERP.Shared.Models
@using Syncfusion.Blazor.Inputs
@using Microsoft.AspNetCore.SignalR.Client
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.SplitButtons


@inject NavigationManager NavigationManager
@inject HttpClient Http

@attribute [Authorize(Roles = "Administrator,Manager-Oren")]
<div style="text-align:right" class="alert alert-primary" role="alert">
    <h2 style="text-align:center">מצאי אורן</h2>
</div>
@if (metzayForOrens == null)
{
    <div class="col-sm">
        <div class="spin-row">
            <SfSpinner Size="40" Label="" Type="SpinnerType.Bootstrap4" CssClass="e-customClass" Visible="true"></SfSpinner>
        </div>
    </div>
}

@{
    var Tool = (new List<string>() { "Search", "ExcelExport" });
}
<div class="row">
    <div class="col" style="text-align:left">
        <button class="btn btn-info"
                type="button"
                @onclick="ClearGridfilter">
            הסר מסנן
        </button>
        <button class="btn btn-warning"
                type="button"
                @onclick="ClearGridSearch">
            ניקוי חיפוש
        </button>
    </div>
</div>


@*GRID SECTION START HERE*@

<div>
    <SfGrid DataSource="@metzayForOrens" FrozenRows="0" AllowExcelExport="true" Height="700" Width="100%" AllowPaging="true" 
            @ref="@SfGrid" Toolbar=@Tool AllowGrouping="false" AllowFiltering="true"
            AllowSorting="true" EnableRtl="true" AllowResizing="false">
        <GridEvents TValue="MetzayForOren" QueryCellInfo="CustomizeCell" RowDataBound="RowBound"></GridEvents>
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
        <GridPageSettings PageSize="40"></GridPageSettings>
        <GridAggregates>
            <GridAggregate>
                <GridAggregateColumns>
                    <GridAggregateColumn Field=@nameof(MetzayForOren.PassportNum) Type="AggregateType.Count">
                        <FooterTemplate>
                            @{
                                var aggregate = (context as AggregateTemplateContext);

                                var num = Convert.ToInt32(aggregate.Count);
                                var magashNum = string.Format("{0:#,0}", num);
                                <b>ספירה:@magashNum</b>

                            }
                        </FooterTemplate>
                    </GridAggregateColumn>
                    <GridAggregateColumn Field=@nameof(MetzayForOren.MagashAmount) Type="AggregateType.Sum">
                        <FooterTemplate>
                            @{
                                var aggregate = (context as AggregateTemplateContext);
                                var num = Convert.ToInt32(aggregate.Sum);
                                var magashNum = string.Format("{0:#,0}", num);
                                <b>@magashNum</b>
                            }
                        </FooterTemplate>
                    </GridAggregateColumn>
                </GridAggregateColumns>
            </GridAggregate>
        </GridAggregates>

        <GridColumns>

            <GridColumn Field=@nameof(MetzayForOren.K_PassportId) HeaderText="" HeaderTextAlign="TextAlign.Center" Type="ColumnType.Number" IsPrimaryKey="true" Visible="false" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
            <GridColumn Field=@nameof(MetzayForOren.Hamama) HeaderText="חמ'" HeaderTextAlign="TextAlign.Center" Type="ColumnType.Number" Format="N0" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
            <GridColumn Field=@nameof(MetzayForOren.Gamlon) HeaderText="גמ'" HeaderTextAlign="TextAlign.Center" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
            <GridColumn Field=@nameof(MetzayForOren.Gidul)  HeaderText="גידול" FilterSettings="@(new FilterSettings{Operator = Syncfusion.Blazor.Operator.Contains})" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
            <GridColumn Field=@nameof(MetzayForOren.Zan) HeaderText="זן" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
            <GridColumn Field=@nameof(MetzayForOren.SowDate) HeaderText="ת.זריעה" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
            <GridColumn Field=@nameof(MetzayForOren.DateEnd) HeaderText="ת.הוצאה" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
            <GridColumn Field=@nameof(MetzayForOren.GrowingDays) HeaderText="י.גידול" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.Number" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
            <GridColumn Field=@nameof(MetzayForOren.PassportAge) HeaderText="גיל" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.Number" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
            <GridColumn Field=@nameof(MetzayForOren.PassportNum) HeaderText="פספורט" FilterSettings="@(new FilterSettings{Operator = Syncfusion.Blazor.Operator.Contains})" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.Number" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
            <GridColumn Field=@nameof(MetzayForOren.Cx) HeaderText="לקוח" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
            <GridColumn Field=@nameof(MetzayForOren.MagashAmount) HeaderText="מגש" HeaderTextAlign="TextAlign.Center" Type="ColumnType.Number" Format="N0" TextAlign="TextAlign.Center" AutoFit="true">
                <Template>
                    @{
                        var value = (context as MetzayForOren);
                        var AVG = value.MagashAmount == 0 ? "" : Convert.ToString(value.MagashAmount);
                        <b>@string.Format("{0:#,0}", value.MagashAmount)</b>
                    }
                </Template>

            </GridColumn>
            <GridColumn Field="@nameof(MetzayForOren.AutoPassportAVG)" HeaderText="ממוצע" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
            <GridColumn Field="@nameof(MetzayForOren.AutoPlantsCalc)" HeaderText="שתילים" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Format="N0" Type="ColumnType.Number" TextAlign="TextAlign.Center" AutoFit="true">
                <Template>
                    @{
                        var value = (context as MetzayForOren);
                        var AVG = value.AutoPlantsCalc == 0 ? "" : Convert.ToString(value.AutoPlantsCalc);
                        <b>@string.Format("{0:#,0}", value.AutoPlantsCalc)</b>
                    }
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(MetzayForOren.SumOfCxsPlants)" HeaderText="סהכ הזמנת שתילים" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Format="N0" Type="ColumnType.Number" TextAlign="TextAlign.Center" AutoFit="true">
                <Template>
                    @{
                        var value = (context as MetzayForOren);
                        var AVG = value.SumOfCxsPlants == 0 ? "" : Convert.ToString(value.SumOfCxsPlants);
                        if(value.SumOfCxsPlants == 0) {<b>@AVG</b> }
                        else {<b>@string.Format("{0:#,0}", value.SumOfCxsPlants)</b> }
                    }
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(MetzayForOren.CxPlantsOrder)" HeaderText="הזמנה" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Format="N0" Type="ColumnType.Number" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
            <GridColumn Field=@nameof(MetzayForOren.CelsTray) HeaderText="סוג מגש" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Format="N0" Type="ColumnType.Number" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        </GridColumns>

    </SfGrid>
</div>

@code {

    //HUB
    #region HUB
    //SPA Hub
    private HubConnection hubConnection;
    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;
    Task SendMessage() => hubConnection.SendAsync("SendMessage");
    #endregion
    //INT
    #region INIT
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/broadcastHub"))
            .Build();

        await LoadData();

        hubConnection.On("ReceiveMessage", () =>
        {
            Task.Run(async () => { await LoadData(); });
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }
    //Get list Of K_Passport Objects
    protected async Task LoadData()
    {
        try
        {
            metzayForOrens = await Http.GetFromJsonAsync<List<MetzayForOren>>("api/KPassports/MetzayForOren");
            //await GenerateMetzayForOrenObjects();
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

    }
    #endregion
    //GRID
    #region GRID
    SfGrid<MetzayForOren> SfGrid;
    List<MetzayForOren> metzayForOrens { get; set; } 
    public K_Passport[] K_Passports;
    public void SearchBtnHandler(string searchKey)
    {
        this.SfGrid.Search(searchKey);
    }
    public void ClearGridSearch()
    {
        try
        {
            this.SfGrid.Search("");
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

    }
    public async void ClearGridfilter()
    {
        await this.SfGrid.ClearFiltering();
    }

    #endregion
    //MetzayForOrenObjects
    #region MetzayForOrenObjects
    async Task GenerateMetzayForOrenObjects()
    {
        try
        {
            //for every passport
            foreach (var kpassport in K_Passports)
            {
                decimal? temp;
                int startAvg;
                if (kpassport.Passport.Passprods.Count == 0)
                {
                    try
                    {
                        temp = kpassport.Passport.UQuanProd * 1000;
                        startAvg = Convert.ToInt32((kpassport.Passport.UQuanProd * 1000) / kpassport.Passport.UTraySow);
                        MetzayForOren metzayForOren = new MetzayForOren
                        {
                            Hamama = kpassport.Hamama,
                            Gamlon = kpassport.Gamlon,
                            Gidul = kpassport.Gidul,
                            Zan = kpassport.Zan,
                            SowDate = kpassport.SowDate,
                            DateEnd = kpassport.DateEnd,
                            GrowingDays = kpassport.GrowingDays,
                            PassportNum = kpassport.PassportNum,
                            Cx ="לא הוכנס ל-SAP",
                            MagashAmount = kpassport.MagashAmount,
                            PassportAVG = kpassport.PassportAVG,
                            CxPlantsOrder = temp,
                            CelsTray = kpassport.CelsTray,
                            PassportStartingAVG = startAvg,
                            SumOfCxsPlants = Convert.ToInt32(temp)
                        };
                        metzayForOrens.Add(metzayForOren);
                    }
                    catch(Exception e)
                    {
                        Console.WriteLine(e.Message);
                        continue;
                    }
                }
                //if more than 1 cx
                else if (kpassport.Passport.Passprods.Count > 1)
                {
                    var counter = 1;
                    var sumofPlants = 0;

                    foreach (var cx in kpassport.Passport.Passprods)
                    {
                        if (kpassport.Passport.UQuanOrdP > 5555554)
                        {
                            temp = kpassport.Passport.UQuanProd * 1000;
                            startAvg = Convert.ToInt32((kpassport.Passport.UQuanProd * 1000) / kpassport.Passport.UTraySow);
                        }
                        else
                        {
                            temp = (cx.UQuantity * 1000);
                            startAvg = Convert.ToInt32((kpassport.Passport.UQuanOrdP * 1000) / kpassport.Passport.UTraySow);
                        }
                        sumofPlants += Convert.ToInt32(temp);
                        counter++;
                        MetzayForOren metzayForOren = new MetzayForOren
                        {
                            Hamama = kpassport.Hamama,
                            Gamlon = kpassport.Gamlon,
                            Gidul = kpassport.Gidul,
                            Zan = kpassport.Zan,
                            SowDate = kpassport.SowDate,
                            DateEnd = kpassport.DateEnd,
                            GrowingDays = kpassport.GrowingDays,
                            PassportNum = kpassport.PassportNum,
                            Cx = cx.UCustName,
                            PassportAVG = kpassport.PassportAVG,
                            CxPlantsOrder = temp,
                            CelsTray = kpassport.CelsTray,
                            PassportStartingAVG = startAvg


                        };
                        if (counter > kpassport.Passport.Passprods.Count)
                        {
                            metzayForOren.SumOfCxsPlants = sumofPlants;
                            metzayForOren.MagashAmount = kpassport.MagashAmount;
                        }
                        metzayForOrens.Add(metzayForOren);
                    }
                }
                //if cx list = 1
                else
                {

                    if (kpassport.Passport.UQuanOrdP > 5555554)
                    {
                        temp = kpassport.Passport.UQuanProd * 1000;
                        startAvg = Convert.ToInt32((kpassport.Passport.UQuanProd * 1000) / kpassport.Passport.UTraySow);
                    }
                    else
                    {
                        temp = (kpassport.Passport.Passprods.FirstOrDefault().UQuantity * 1000);
                        startAvg = Convert.ToInt32((kpassport.Passport.UQuanOrdP * 1000) / kpassport.Passport.UTraySow);
                    }

                    MetzayForOren metzayForOren = new MetzayForOren
                    {
                        Hamama = kpassport.Hamama,
                        Gamlon = kpassport.Gamlon,
                        Gidul = kpassport.Gidul,
                        Zan = kpassport.Zan,
                        SowDate = kpassport.SowDate,
                        DateEnd = kpassport.DateEnd,
                        GrowingDays = kpassport.GrowingDays,
                        PassportNum = kpassport.PassportNum,
                        Cx = kpassport.Passport.Passprods.FirstOrDefault().UCustName,
                        MagashAmount = kpassport.MagashAmount,
                        PassportAVG = kpassport.PassportAVG,
                        CxPlantsOrder = temp,
                        CelsTray = kpassport.CelsTray,
                        PassportStartingAVG = startAvg,
                        SumOfCxsPlants = Convert.ToInt32(temp)
                    };
                    metzayForOrens.Add(metzayForOren);
                }
            }
        }
        catch(Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }
    #endregion
    //GRID STYLE
    #region GRID STYLE
    //CELL MAGASH TYPE STYLE
    public void CustomizeCell(QueryCellInfoEventArgs<MetzayForOren> args)
    {
        if (args.Column.HeaderText == "גידול" || args.Column.HeaderText == "זן" || args.Column.HeaderText == "ת.זריעה" || args.Column.HeaderText == "ת.הוצאה"
            || args.Column.HeaderText == "י.גידול" || args.Column.HeaderText == "לקוח" || args.Column.HeaderText == "מגשים" || args.Column.HeaderText == "שתילים"
            || args.Column.HeaderText == "סהכ הזמנת שתילים" || args.Column.HeaderText == "הזמנה")
        {


        }
        if (args.Column.Field == "CelsTray")
        {
            try
            {

                if (Convert.ToDouble(args.Data.CelsTray) == 180)
                {
                    args.Cell.AddClass(new string[] { "magash-180" });
                }
                else if (Convert.ToDouble(args.Data.CelsTray) == 187)
                {
                    args.Cell.AddClass(new string[] { "magash-187" });
                }
                else if (Convert.ToDouble(args.Data.CelsTray) == 442)
                {
                    args.Cell.AddClass(new string[] { "magash-442" });
                }
                else
                {
                    args.Cell.AddClass(new string[] { "magash-308" });
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                return;
            }
        }
        ////PASSPORT STYLE
        if (args.Column.Field == "PassportNum")
        {
            args.Cell.AddClass(new string[] { "passport" });
        }
        //LOW AVG
        if (args.Column.Field == "PassportAVG")
        {
            if (args.Data.IsLowAVG == true)
            {
                args.Cell.AddClass(new string[] { "is-low-avg" });
            }
        }

        //HAMAMA STYLE
        if (args.Column.Field == "Hamama")
        {
            if (args.Data.Hamama.Trim() == "1")
            {
                args.Cell.AddClass(new string[] { "hamama1" });
            }
            else if (args.Data.Hamama.Trim() == "2")
            {
                args.Cell.AddClass(new string[] { "hamama2" });
            }
            else if (args.Data.Hamama.Trim() == "3")
            {
                args.Cell.AddClass(new string[] { "hamama3" });
            }
            else if (args.Data.Hamama.Trim() == "4")
            {
                args.Cell.AddClass(new string[] { "hamama4" });
            }
            else if (args.Data.Hamama.Trim() == "5")
            {
                args.Cell.AddClass(new string[] { "hamama5" });
            }
            else if (args.Data.Hamama.Trim() == "6")
            {
                args.Cell.AddClass(new string[] { "hamama6" });
            }
            else if (args.Data.Hamama.Trim() == "7")
            {
                args.Cell.AddClass(new string[] { "hamama7" });
            }
            else if (args.Data.Hamama.Trim() == null)
            {
                args.Cell.AddClass(new string[] { "null" });
            }
        }
    }
    //edit dialog settings
    private DialogSettings DialogParams = new DialogSettings { MinHeight = "430px", CloseOnEscape = true, ShowCloseIcon = true, Width = "325px" };

    //ROW IsNeedToBeAudit STYLE
    public void RowBound(RowDataBoundEventArgs<MetzayForOren> args)
    {
        if (args.Data.IsNeedToBeAudit == true)
        {
            args.Row.AddClass(new string[] { "is-need-to-be-audit" });
        }
        if (args.Data.IsNeedToBeAudit == true && args.Data.IsSavedForCx == true)
        {
            args.Row.AddClass(new string[] { "is-need-to-be-saved-audit" });
        }
        if (args.Data.IsSavedForCx == true)
        {
            args.Row.AddClass(new string[] { "is-need-to-be-saved" });
        }

    }


    #endregion
}
<style>
    .e-grid .e-headercell {
        background-color: yellow;
    }
        .e-grid .e-headercell .e-headercelldiv {
            font-size:20px;
        } 
    .e-headercell {
        color: black;
        font-size: 3rem;
        font-weight: bold;
    } 
    .magash-180 {
        background-color: plum;
    }

    .magash-187 {
        background-color: lightyellow;
    }

    .magash-442 {
        background-color: grey;
        font-weight: bold;
    }

    .magash-308 {
        background-color: darkseagreen;
        font-weight: bold;
    }

    .magash-250 {
        background-color: green;
        font-weight: bold;
    }

    .magash-210 {
        background-color: hotpink;
        font-weight: bold;
    }

    .magash-260 {
        background-color: rosybrown;
        font-weight: bold;
    }

    .passport {
        background-color: powderblue;
        font-weight: bold;
        color: red;
    }

    .null {
        background-color: antiquewhite;
        font-weight: bold;
    }

    .hamama1 {
        background-color: cornflowerblue;
        font-weight: bold;
    }

    .hamama2 {
        background-color: yellow;
        font-weight: bold;
    }

    .hamama3 {
        background-color: lightpink;
        font-weight: bold;
    }

    .hamama4 {
        background-color: darkseagreen;
        font-weight: bold;
    }

    .hamama5 {
        background-color: gray;
        font-weight: bold;
    }

    .hamama6 {
        background-color: cadetblue;
        font-weight: bold;
    }

    .hamama7 {
        background-color: palevioletred;
        font-weight: bold;
    }


    #toast_default .e-toast-container {
        color: black;
        font-size: 13px;
        font-weight: normal;
    }

    /*   GRID ROW STYLE*/
    .is-need-to-be-audit {
        background-color: orange;
    }

    .is-need-to-be-saved {
        background-color: deepskyblue;
    }

    .is-need-to-be-saved-audit {
        background-color: mediumpurple;
    }

    .is-low-avg {
        background-color: orangered;
    }

    .clean {
        background-color: white;
    }

    .form-group.col-md-6 {
        width: 200px;
    }

    label.e-float-text {
        position: relative;
        padding-left: 0;
        top: 10%;
    }

    .e-toast-container .e-toast .e-toast-message .e-toast-content {
        color: white;
        font-size: 18px;
        font-weight: normal;
    }

    .e-toast-container .e-toast {
        background-color: black;
    }
</style>