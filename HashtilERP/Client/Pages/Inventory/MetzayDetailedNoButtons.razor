@page "/inventory/MetzayDetailedNoButtons"
@inject IJSRuntime jsRuntime

@using System.Security.Claims;

@using Microsoft.AspNetCore.Authorization
@using ZXingBlazor.Components
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Spinner
@using HashtilERP.Shared.Models
@using Syncfusion.Blazor.Inputs
@using Microsoft.AspNetCore.SignalR.Client
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Data
@using System.ComponentModel.DataAnnotations;

@inject NavigationManager NavigationManager
@inject HttpClient Http

@attribute [Authorize(Roles = "Administrator,Viewer,Manager-Drivers,Sales-A,Sales-B,Agronomist,Manager-Oren")]

<div style="text-align:right" class="alert alert-success" role="alert">
    <h3 style="text-align:center">מצאי מפורט</h3>
</div>

@if (K_Passports == null)
{
    <div class="col-sm">
        <div class="spin-row">
            <SfSpinner Size="40" Label="" Type="SpinnerType.Bootstrap4" CssClass="e-customClass" Visible="true"></SfSpinner>
        </div>
    </div>
}

<br />

@{
    var Tool = (new List<string>() { "Search", "ExcelExport" });
}

<div class="row">
    @if (isDevice == "Mobile")
    {
        <div class="col">
            <button class="btn btn-primary"
                    type="button"
                    @onclick="(() => ShowScanBarcode = !ShowScanBarcode)">
                @*ENTER SCAN*@
                סריקה
            </button>
        </div>
    }

    <div class="col" style="text-align:left">
        <button class="btn btn-info"
                type="button"
                @onclick="ClearGridfilter">
            הסר מסנן
        </button>
        <button class="btn btn-warning"
                type="button"
                @onclick="ClearGridSearch">
            ניקוי חיפוש
        </button>
    </div>

</div>
@if (ShowScanBarcode)
{

    <BarcodeReader ScanResult="((e) => { passportInput = e; SearchBtnHandler(passportInput); ShowScanBarcode = !ShowScanBarcode; })"
                   ShowScanBarcode="ShowScanBarcode"
                   Close="(() => ShowScanBarcode = !ShowScanBarcode)" />

}
<div class="col-sm" style="z-index:1">
    <div class="spin-row" style="z-index:1">
        <SfSpinner Size="40" Label="" Type="SpinnerType.Bootstrap4" CssClass="e-customClass" Visible="@AfterActionSpinner"></SfSpinner>
    </div>
</div>

@*GRID SECTION START HERE*@
<div>
    <SfGrid DataSource="@K_Passports" FrozenRows="0" AllowExcelExport="true" Height="800" Width="100%" AllowPaging="true" @ref="@SfGrid" Toolbar=@Tool AllowGrouping="false" AllowFiltering="true"
            AllowSorting="true" EnableRtl="true" AllowResizing="true">
        <GridEvents QueryCellInfo="CustomizeCell" OnActionBegin="ActionBegin" RowDataBound="RowBound"
                    DetailDataBound="DetailDataBound" DataBound="DataBound"
                    OnToolbarClick="ToolbarClickHandler" TValue="K_Passport"></GridEvents>
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
        <GridPageSettings PageSize="40"></GridPageSettings>

        <GridTemplates>

            <DetailTemplate>

                <div style="text-align:right;width:auto">
                    <SfTab HeaderPlacement="HeaderPosition.Top">
                        <TabEvents Selecting="Select">
                        </TabEvents>
                        <TabItems>
                            <TabItem>
                                <ChildContent>
                                    <TabHeader Text="לקוחות"></TabHeader>
                                </ChildContent>
                                <ContentTemplate>
                                    @{ var passport = (context as K_Passport);
                                        <table class="table table-striped table-hover" style="text-align:right;width:auto">
                                            <thead>
                                                <tr>
                                                    <th>
                                                        לקוח
                                                    </th>
                                                    <th>
                                                        הזמנה
                                                    </th>
                                                    <th>
                                                        מגשים
                                                    </th>
                                                    <th>
                                                        ת.הוצאה
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody>

                                                @foreach (var cx in passport.Passport.Passprods.OrderByDescending(x => x.UQuantity))
                                                {
                                                    decimal? temp;
                                                    int startAvg;
                                                    if (passport.Passport.UQuanOrdP > 5555554)
                                                    {
                                                        temp = passport.Passport.UQuanProd * 1000;
                                                        startAvg = Convert.ToInt32((passport.Passport.UQuanProd * 1000) / passport.Passport.UTraySow);
                                                    }
                                                    else
                                                    {
                                                        temp = (cx.UQuantity * 1000);
                                                        startAvg = Convert.ToInt32((passport.Passport.UQuanOrdP * 1000) / passport.Passport.UTraySow);
                                                    }

                                                    var display = string.Format("{0:#,0}", temp);
                                                    var magashPercx = temp / startAvg;
                                                    var magashPercxScreen = string.Format("{0:#,0}", magashPercx);
                                                    <tr>
                                                        <td>
                                                            @cx.UCustName
                                                        </td>
                                                        <td>
                                                            @display
                                                        </td>
                                                        <td>
                                                            @magashPercxScreen
                                                        </td>
                                                        <td>
                                                            @Convert.ToDateTime(cx.UDateSupp).ToShortDateString()
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    }
                                </ContentTemplate>
                            </TabItem>
                            <TabItem>
                                <ChildContent>
                                    <TabHeader Text="הערות"></TabHeader>
                                </ChildContent>
                                <ContentTemplate>
                                    @{ var passport1 = (context as K_Passport);
                                        <table class="table table-striped table-hover" style="text-align:right;width:auto">
                                            <thead>
                                                <tr>
                                                    <th>
                                                        תאריך
                                                    </th>
                                                    <th>
                                                        נוספה ע"י
                                                    </th>
                                                    <th>
                                                        מצב
                                                    </th>
                                                    <th>
                                                        תיאור
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody>

                                                @foreach (var form in passport1.PassportAuditForms.OrderByDescending(x => x.CreateDate))
                                                {


                                                    <tr>
                                                        <td>
                                                            @form.CreateDate
                                                        </td>
                                                        <td>
                                                            @form.UserName
                                                        </td>
                                                        <td>
                                                            @form.AuditStatus
                                                        </td>
                                                        <td>
                                                            @form.Remark
                                                        </td>
                                                    </tr>

                                                }
                                            </tbody>
                                        </table>
                                    }
                                </ContentTemplate>
                            </TabItem>
                            <TabItem>
                                <ChildContent>
                                    <TabHeader Text="היסטוריית עריכה"></TabHeader>
                                </ChildContent>
                                <ContentTemplate>
                                    @{ var passport2 = (context as K_Passport);
                                        <table class="table table-striped table-hover" style="text-align:right;width:auto">
                                            <thead>
                                                <tr>
                                                    <th>
                                                        תאריך
                                                    </th>
                                                    <th>
                                                        נערכה ע"י
                                                    </th>
                                                    <th>
                                                        תיאור
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var updateAudit in passport2.k_PassportAuditTblVer2s.OrderByDescending(x => x.Date))
                                                {

                                                    <tr>
                                                        <td>
                                                            @updateAudit.Date
                                                        </td>
                                                        <td>
                                                            @updateAudit.UserName
                                                        </td>
                                                        <td>
                                                            @updateAudit.AuditString
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    }
                                </ContentTemplate>
                            </TabItem>
                            <TabItem>
                                <ChildContent>
                                    <TabHeader Text="נתונים נוספים"></TabHeader>
                                </ChildContent>
                                <ContentTemplate>
                                    @{ var passport2 = (context as K_Passport);
                                        <div class="form-row" dir="rtl">
                                            <div class="col-form-label">
                                                @{ if (passport2.GrowingRoom == null || passport2.GrowingRoom == "X")
                                                    {
                                                        <label class="form-check-label" style="text-align: right; font-weight:500">הוכנס ישירות למצאי ע"י</label>
                                                    }
                                                    else
                                                    { <label class="form-check-label" style="text-align: right; font-weight:500">הוכנס לחדר הנבטה ע"י:</label>
                                                    }
                                                }
                                            </div>
                                            <div class="col-form-label">
                                                <label class="form-check-label" style="text-align:right;">@passport2.KPassportInsertAudit.UserName</label>
                                            </div>
                                            <div class="col-form-label">
                                                <label class="form-check-label" style="text-align:right;">@passport2.KPassportInsertAudit.Date</label>
                                            </div>
                                        </div>
                                        <div class="form-row" dir="rtl">
                                            <div class="col-form-label">
                                                <label class="form-check-label" style="text-align: right; font-weight:500">מקדם זריעה SAP:</label>
                                            </div>
                                            <div class="col-form-label">
                                                <label class="form-check-label" style="text-align:right">@passport2.PassportStartingAVG</label>
                                            </div>
                                        </div>
                                    }
                                </ContentTemplate>
                            </TabItem>
                        </TabItems>
                    </SfTab>
                </div>
            </DetailTemplate>

        </GridTemplates>

        <GridAggregates>
            <GridAggregate>
                <GridAggregateColumns>
                    <GridAggregateColumn Field=@nameof(K_Passport.PassportNum) Type="AggregateType.Count">
                        <FooterTemplate>
                            @{
                                var aggregate = (context as AggregateTemplateContext);

                                var num = Convert.ToInt32(aggregate.Count);
                                var magashNum = string.Format("{0:#,0}", num);
                                <b>ספירה:@magashNum</b>

                            }
                        </FooterTemplate>
                    </GridAggregateColumn>
                    <GridAggregateColumn Field=@nameof(K_Passport.MagashAmount) Type="AggregateType.Sum">
                        <FooterTemplate>
                            @{
                                var aggregate = (context as AggregateTemplateContext);
                                var num = Convert.ToInt32(aggregate.Sum);
                                var magashNum = string.Format("{0:#,0}", num);
                                <b>@magashNum</b>
                            }
                        </FooterTemplate>
                    </GridAggregateColumn>
                </GridAggregateColumns>
            </GridAggregate>
        </GridAggregates>

        <GridColumns>           
            <GridColumn Field=@nameof(K_Passport.K_PassportId) HeaderText="" HeaderTextAlign="TextAlign.Center" Type="ColumnType.Number" IsPrimaryKey="true" Visible="false" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.Hamama) HeaderText="חמ'" HeaderTextAlign="TextAlign.Center" Type="ColumnType.Number" Format="N0" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.Gamlon) HeaderText="גמ'" HeaderTextAlign="TextAlign.Center" Type="ColumnType.String" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.PassportNum) HeaderText="פספורט" FilterSettings="@(new FilterSettings{Operator = Syncfusion.Blazor.Operator.Contains})" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.Number" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.Gidul) HeaderText="גידול" FilterSettings="@(new FilterSettings{Operator = Syncfusion.Blazor.Operator.Contains})" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.String" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.Zan) HeaderText="זן" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.String" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.SowDate) HeaderText="ת.זריעה" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.DateEnd) HeaderText="ת.הוצאה" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.GrowingDays) HeaderText="ימי גידול" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.Number" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.PassportAge) HeaderText="גיל" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.Number" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.MagashAmount) HeaderText="מגשים" HeaderTextAlign="TextAlign.Center" Type="ColumnType.Number" Format="N0" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field="@nameof(K_Passport.AutoPassportAVG)" HeaderText="ממוצע" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.String" TextAlign="TextAlign.Center">
                @*<Template>
                        @{
                            var value = (context as K_Passport);
                            var AVG = value.PassportAVG == -1 ? "ללא" : Convert.ToString(value.PassportAVG);
                            <b>@AVG</b>
                        }
                    </Template>*@
            </GridColumn>
            <GridColumn Field=@nameof(K_Passport.PassportStatus) HeaderText="סטטוס" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.String" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.PassportCondition) HeaderText="מצב" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.String" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field="@nameof(K_Passport.AutoPlantsCalc)" HeaderText="שתילים" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Format="N0" Type="ColumnType.Number" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.CelsTray) HeaderText="סוג מגש" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Format="N0" Type="ColumnType.Number" TextAlign="TextAlign.Center"></GridColumn>            
        </GridColumns>

    </SfGrid>
</div>









@code {
    //REGION EDIT DIALOG
    #region Custom Edit Dialog
    //Edit dialog spinner
    public bool EditPassBool { get; set; } = false;
    //edit dialog Visabillity
    private bool GridEditModalVisible { get; set; } = false;
    //Custom Open Edit Dialog For Grid
    private void OpenCustomEditDialog()
    {
        this.GridEditModalVisible = true;
    }
    //Custom Close Edit Dialog For Grid
    private void CloseCustomEditDialog()
    {
        this.GridEditModalVisible = false;
        InputHamama = "";
        InputGamlon = "";
    }
    #endregion

    //the Object type fot type grid and PUT calls
    public K_Passport K_Passport = new K_Passport();

    //Objects list populate grid
    public K_Passport[] K_Passports;

    public K_Passport KPassportForAllToEditCheck { get; set; } = new K_Passport();

    //for AuditForm
    public PassportAuditForm PassportAuditForm = new PassportAuditForm();

    //SPA Hub
    private HubConnection hubConnection;

    //For PUT passport Green & Gamlon
    string InputHamama, InputGamlon;
    //string for destroy pass to show what you are want to destroy
    string DestroyPassNumber;

    //Grid Object for costum actions
    SfGrid<K_Passport> SfGrid;

    //bool to prevent UI render when Hub call LoadData
    bool RowOpenForSignalR { get; set; }
    //int to prevent UI render when Hub call LoadData
    int RowOpenForSignalRNum { get; set; } = 0;
    //Spinners
    bool AfterActionSpinner { get; set; } = false;
    bool SpinnerBool { get; set; } = false;
    bool SavePassForCxSpinner { get; set; } = false;

    // Save for Cx Spinner.
    public bool SavePassForCxModal { get; set; } = false;

    //Save for Cx Remark
    [StringLength(1000, MinimumLength = 2, ErrorMessage = "חייב להזין תיאור")]
    public string SavedPassportForCxRemerk { get; set; }



    //Toast Screen Show After Succesfull PUT
    private static string HebSaved = "נשמר!";



    //Still experiment for this one(tryi'n to set 'log in as:' claim name)
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    ClaimsPrincipal CurrentUser = new ClaimsPrincipal();




    // Property to control the delete dialog.
    public bool DeleteRecordConfirmVisibility { get; set; } = false;

    //CAMERA SCANNER for search in datagrid
    private string isDevice { get; set; }
    private bool mobile { get; set; }
    bool ShowScanBarcode { get; set; } = false;
    public int? BarCode { get; set; }
    string passportInput;


    public bool firstrender { get; set; } = true;

    [JSInvokable("DetailCollapse")]                            // method called from JS when collapse is done
    public void DetailRowCollapse(string CollapseIndex)
    {
        K_Passport CollapseRow = (K_Passport)SfGrid.CurrentViewData.ElementAt(Convert.ToInt32(CollapseIndex));
        ExpandedRows.Remove(CollapseRow.K_PassportId);              //Remove the collapsed row from expanded dictionary
    }

    public async Task DataBound()
    {
        if (firstrender)
        {
            try
            {
                var dotNetReference = DotNetObjectReference.Create(this);          // create dotnet ref
                await jsRuntime.InvokeAsync<string>("detail", dotNetReference);     // send the dotnet ref to JS side
                firstrender = false;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }

        foreach (var a in ExpandedRows)
        {
            var PKIndex = await SfGrid.GetRowIndexByPrimaryKey(a.Key);
            await SfGrid.DetailExpandCollapseRow((K_Passport)SfGrid.CurrentViewData.ElementAt(Convert.ToInt32(PKIndex)));     //Expand the already expnaded detailrows
        }
    }
    IDictionary<int, K_Passport> ExpandedRows = new Dictionary<int, K_Passport>();
    public void DetailDataBound(DetailDataBoundEventArgs<K_Passport> args)
    {
        if (!ExpandedRows.ContainsKey(args.Data.K_PassportId))
        {
            ExpandedRows.Add(args.Data.K_PassportId, args.Data);  //add the expanded rows to dictionary
        }
    }

    public void SearchBtnHandler(string searchKey)
    {
        this.SfGrid.Search(searchKey);
    }
    public void ClearGridSearch()
    {
        try
        {
            this.SfGrid.Search("");
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

    }
    public async void ClearGridfilter()
    {
        await this.SfGrid.ClearFiltering();
    }


    //Check if userAgent is Pc Or Mobile
    public async Task FindResponsiveness()
    {
        mobile = await jsRuntime.InvokeAsync<bool>("isDevice");
        isDevice = mobile ? "Mobile" : "Desktop";

    }
    public void Select(SelectingEventArgs args)
    {
        if (args.IsSwiped)
        {
            args.Cancel = true;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await FindResponsiveness();
        InputHamama = "";
        InputGamlon = "";
        await LoadData();
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/broadcastHub"))
            .Build();

        hubConnection.On("ReceiveMessage", () =>
        {
            Task.Run(async () => { await LoadData(); });
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    //Get list Of K_Passport Objects
    protected async Task LoadData()
    {
        try
        {
            K_Passports = await Http.GetFromJsonAsync<K_Passport[]>("api/KPassports/metzay");
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    Task SendMessage() => hubConnection.SendAsync("SendMessage");

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }

   

    

  

  

   

    public void AauditPassport(CommandClickEventArgs<K_Passport> args)
    {
        this.DeleteRecordConfirmVisibility = true;
        K_Passport = PassportAlgorithm.ArgsToObject(args.RowData);
        PassportAuditForm.K_PassportId = K_Passport.K_PassportId;
        PassportAuditForm.CreateDate = DateTime.Now;
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Excel Export")
        {
            var Now = DateTime.Now;
            var stringNowDate = Now.ToShortDateString();
            var stringNow = Now.ToShortTimeString();


            ExcelExportProperties ExportProperties = new ExcelExportProperties();

            ExportProperties.FileName = $"מצאי חממות לתאריך-{stringNowDate} שעה: {stringNow}.xlsx";
            await this.SfGrid.ExcelExport(ExportProperties);
        }
    }
        
    //CELL MAGASH TYPE STYLE
    public void CustomizeCell(QueryCellInfoEventArgs<K_Passport> args)
    {
        if (args.Column.Field == "CelsTray")
        {
            try
            {

                if (Convert.ToDouble(args.Data.CelsTray) == 180)
                {
                    args.Cell.AddClass(new string[] { "magash-180" });
                }
                else if (Convert.ToDouble(args.Data.CelsTray) == 187)
                {
                    args.Cell.AddClass(new string[] { "magash-187" });
                }
                else if (Convert.ToDouble(args.Data.CelsTray) == 442)
                {
                    args.Cell.AddClass(new string[] { "magash-442" });
                }
                else
                {
                    args.Cell.AddClass(new string[] { "magash-308" });
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                return;
            }
        }
        ////PASSPORT STYLE
        if (args.Column.Field == "PassportNum")
        {
            args.Cell.AddClass(new string[] { "passport" });
        }
        //LOW AVG
        if (args.Column.Field == "PassportAVG")
        {
            if (args.Data.IsLowAVG == true)
            {
                args.Cell.AddClass(new string[] { "is-low-avg" });
            }
        }

        //HAMAMA STYLE
        if (args.Column.Field == "Hamama")
        {
            if (args.Data.Hamama.Trim() == "1")
            {
                args.Cell.AddClass(new string[] { "hamama1" });
            }
            else if (args.Data.Hamama.Trim() == "2")
            {
                args.Cell.AddClass(new string[] { "hamama2" });
            }
            else if (args.Data.Hamama.Trim() == "3")
            {
                args.Cell.AddClass(new string[] { "hamama3" });
            }
            else if (args.Data.Hamama.Trim() == "4")
            {
                args.Cell.AddClass(new string[] { "hamama4" });
            }
            else if (args.Data.Hamama.Trim() == "5")
            {
                args.Cell.AddClass(new string[] { "hamama5" });
            }
            else if (args.Data.Hamama.Trim() == "6")
            {
                args.Cell.AddClass(new string[] { "hamama6" });
            }
            else if (args.Data.Hamama.Trim() == "7")
            {
                args.Cell.AddClass(new string[] { "hamama7" });
            }
            else if (args.Data.Hamama.Trim() == null)
            {
                args.Cell.AddClass(new string[] { "null" });
            }
        }
    }
    //edit dialog settings
    private DialogSettings DialogParams = new DialogSettings { MinHeight = "430px", CloseOnEscape = true, ShowCloseIcon = true, Width = "325px" };

    //ROW IsNeedToBeAudit STYLE
    public void RowBound(RowDataBoundEventArgs<K_Passport> args)
    {
        if (args.Data.IsNeedToBeAudit == true)
        {
            args.Row.AddClass(new string[] { "is-need-to-be-audit" });
        }
        if (args.Data.IsNeedToBeAudit == true && args.Data.IsSavedForCx == true)
        {
            args.Row.AddClass(new string[] { "is-need-to-be-saved-audit" });
        }
        if (args.Data.IsSavedForCx == true)
        {
            args.Row.AddClass(new string[] { "is-need-to-be-saved" });
        }

    }

    public void ActionBegin(ActionEventArgs<K_Passport> arg)
    {
        //Handles add operation

        //Handles edit operation. During edit operation, original object will be cloned.
        if (arg.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {

        }
    }
}


<style>
    .magash-180 {
        background-color: plum;
    }

    .magash-187 {
        background-color: lightyellow;
    }

    .magash-442 {
        background-color: grey;
        font-weight: bold;
    }

    .magash-308 {
        background-color: darkseagreen;
        font-weight: bold;
    }

    .magash-250 {
        background-color: green;
        font-weight: bold;
    }

    .magash-210 {
        background-color: hotpink;
        font-weight: bold;
    }

    .magash-260 {
        background-color: rosybrown;
        font-weight: bold;
    }

    .passport {
        background-color: powderblue;
        font-weight: bold;
        color: red;
    }

    .null {
        background-color: antiquewhite;
        font-weight: bold;
    }

    .hamama1 {
        background-color: cornflowerblue;
        font-weight: bold;
    }

    .hamama2 {
        background-color: yellow;
        font-weight: bold;
    }

    .hamama3 {
        background-color: lightpink;
        font-weight: bold;
    }

    .hamama4 {
        background-color: darkseagreen;
        font-weight: bold;
    }

    .hamama5 {
        background-color: gray;
        font-weight: bold;
    }

    .hamama6 {
        background-color: cadetblue;
        font-weight: bold;
    }

    .hamama7 {
        background-color: palevioletred;
        font-weight: bold;
    }


    #toast_default .e-toast-container {
        color: black;
        font-size: 13px;
        font-weight: normal;
    }

    /*   GRID ROW STYLE*/
    .is-need-to-be-audit {
        background-color: orange;
    }

    .is-need-to-be-saved {
        background-color: deepskyblue;
    }

    .is-need-to-be-saved-audit {
        background-color: mediumpurple;
    }

    .is-low-avg {
        background-color: orangered;
    }

    .clean {
        background-color: white;
    }

    .form-group.col-md-6 {
        width: 200px;
    }

    label.e-float-text {
        position: relative;
        padding-left: 0;
        top: 10%;
    }

    .e-toast-container .e-toast .e-toast-message .e-toast-content {
        color: white;
        font-size: 18px;
        font-weight: normal;
    }

    .e-toast-container .e-toast {
        background-color: black;
    }
</style>
