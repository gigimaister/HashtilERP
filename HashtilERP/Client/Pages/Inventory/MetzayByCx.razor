@page "/inventory/metzaybycx"

@using Microsoft.AspNetCore.SignalR.Client
@using HashtilERP.Shared.Models
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Spinner
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DropDowns
@using Microsoft.AspNetCore.Authorization
@using Syncfusion.Blazor.Popups


@inject HttpClient Http
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = "Administrator,Viewer,Manager-GreenHouse,Manager-Oren,AuditAvgCounter,Manager-Drivers,Sales-A,Sales-B")]

<div style="text-align:right" class="alert alert-success" role="alert">
    <h3 style="text-align:center">הזמנות לקוחות במצאי</h3>
</div>
@{ if (k_PassportsPerCx != null)
    {
        <div>
            <button class="btn btn-info" @onclick="@f">פתח את כל השורות</button>
        </div>
    }}
@if (K_Passports == null)
{
    <div class="col-sm">
        <div class="spin-row">
            <SfSpinner Size="40" Label="" Type="SpinnerType.Bootstrap4" CssClass="e-customClass" Visible="true"></SfSpinner>
        </div>
    </div>
}
@{ if (k_PassportsPerCx == null)
    {
        <div style="text-align:right" class="alert alert-info" role="alert">
            <h1 style="text-align:center">נא לבחור לקוח</h1>
        </div>
    }
}
<div class="col-sm" style="z-index:1">
    <div class="spin-row" style="z-index:1">
        <SfSpinner Size="40" Label="" Type="SpinnerType.Bootstrap4" CssClass="e-customClass" Visible="@AfterActionSpinner"></SfSpinner>
    </div>
</div>
<div class="container" style="text-align:right">
    <div class="form-group">
        <div class="row">
            <div class="col" style="text-align:right">

                <SfAutoComplete TValue="string" TItem="string" @bind-Value="@CxName" @onclick="CloseExpandRows" Placeholder="בחירת לקוח" DataSource="@CxNames">
                    <AutoCompleteFieldSettings Value="CxName"></AutoCompleteFieldSettings>
                </SfAutoComplete>
            </div>
            <div class="col" style="text-align:right">

                <button class="btn btn-success" @onclick="GetCxPassports">חיפוש</button>
            </div>
        </div>


    </div>
</div>
@*GRID SECTION START HERE*@
<div>
    <SfGrid DataSource="@k_PassportsPerCx" FrozenRows="0" AllowExcelExport="true" Height="800" Width="100%" AllowPaging="true" @ref="@SfGrid" AllowGrouping="false" AllowFiltering="true"
            AllowSorting="true" EnableRtl="true" AllowResizing="true">
        <GridEvents TValue="K_Passport" QueryCellInfo="CustomizeCell" RowDataBound="RowBound"></GridEvents>
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
        <GridPageSettings PageSize="40"></GridPageSettings>

        <GridTemplates>

            <DetailTemplate>

                <div style="text-align:right;width:auto">
                    <SfTab HeaderPlacement="HeaderPosition.Top">
                        <TabEvents Selecting="Select">
                        </TabEvents>
                        <TabItems>
                            <TabItem>
                                <ChildContent>
                                    <TabHeader Text="הוצאות ללקוח"></TabHeader>
                                </ChildContent>
                                <ContentTemplate>
                                    @{
                                        var passport = (context as K_Passport);
                                        var quantity = string.Format("{0:#,0}", K_PassportFunctions.CxPlantsOrder(passport, CxName)[0]) ?? "";
                                    }
                                    <div class="alert alert-primary " role="alert">
                                        <h4 style="text-align:right;color:black;font-weight:bold">זן:@passport.Zan </h4>
                                        <h4 style="text-align:right;color:black;font-weight:bold">כמות מוזמנת:@quantity </h4>

                                    </div>
                                    <div class="alert alert-secondary" role="alert">
                                        <table class="table table-hover table-striped">
                                            <thead class="thead-dark">
                                                <tr>
                                                    <td style="font-size:18px;font-weight:bold">
                                                        זמן
                                                    </td>
                                                    <td style="font-size:18px;font-weight:bold">
                                                        משתמש
                                                    </td>
                                                    <td style="font-size:18px;font-weight:bold">
                                                        תיאור
                                                    </td>
                                                    <td style="font-size:18px;font-weight:bold">
                                                        עבודה
                                                    </td>
                                                    <td style="font-size:18px;font-weight:bold">
                                                        שיוך לפספורט
                                                    </td>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @{var passportsForCx = passport.PassportAuditForms.Where(x => x.Remark.Contains(CxName)).ToList();
                                                    foreach (var remark in passportsForCx)
                                                    {
                                                        var editPassportRemark = passport.k_PassportAuditTblVer2s.Where(x => x.Date.Minute == Convert.ToDateTime(remark.CreateDate).Minute).FirstOrDefault() ?? new K_PassportAuditTblVer2();

                                                        <tr>
                                                            <td style="font-size:15px">
                                                                @remark.CreateDate
                                                            </td>
                                                            <td style="font-size:15px">
                                                                @remark.UserName
                                                            </td>
                                                            <td style="font-size:15px">
                                                                @remark.AuditStatus
                                                            </td>
                                                            <td style="font-size:15px">
                                                                @remark.Remark
                                                            </td>
                                                            <td style="font-size:15px">
                                                                @editPassportRemark.AuditString
                                                            </td>
                                                        </tr>
                                                    }
                                                }

                                            </tbody>
                                        </table>
                                    </div>
                                </ContentTemplate>
                            </TabItem>
                            <TabItem>
                                <ChildContent>
                                    <TabHeader Text="לקוחות"></TabHeader>
                                </ChildContent>
                                <ContentTemplate>
                                    @{ var passport = (context as K_Passport);
                                        <table class="table table-striped table-hover" style="text-align:right;width:auto">
                                            <thead>
                                                <tr>
                                                    <th>
                                                        לקוח
                                                    </th>
                                                    <th>
                                                        הזמנה
                                                    </th>
                                                    <th>
                                                        מגשים
                                                    </th>
                                                    <th>
                                                        ת.הוצאה
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody>

                                                @foreach (var cx in passport.Passport.Passprods.OrderByDescending(x => x.UQuantity))
                                                {
                                                    decimal? temp;
                                                    int startAvg;
                                                    if (passport.Passport.UQuanOrdP > 5555554)
                                                    {
                                                        temp = passport.Passport.UQuanProd * 1000;
                                                        startAvg = Convert.ToInt32((passport.Passport.UQuanProd * 1000) / passport.Passport.UTraySow);
                                                    }
                                                    else
                                                    {
                                                        temp = (cx.UQuantity * 1000);
                                                        startAvg = Convert.ToInt32((passport.Passport.UQuanOrdP * 1000) / passport.Passport.UTraySow);
                                                    }

                                                    var display = string.Format("{0:#,0}", temp);
                                                    var magashPercx = temp / startAvg;
                                                    var magashPercxScreen = string.Format("{0:#,0}", magashPercx);
                                                    <tr>
                                                        <td>
                                                            @cx.UCustName
                                                        </td>
                                                        <td>
                                                            @display
                                                        </td>
                                                        <td>
                                                            @magashPercxScreen
                                                        </td>
                                                        <td>
                                                            @Convert.ToDateTime(cx.UDateSupp).ToShortDateString()
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    }
                                </ContentTemplate>
                            </TabItem>
                            <TabItem>
                                <ChildContent>
                                    <TabHeader Text="הערות"></TabHeader>
                                </ChildContent>
                                <ContentTemplate>
                                    @{ var passport1 = (context as K_Passport);
                                        <table class="table table-striped table-hover" style="text-align:right;width:auto">
                                            <thead>
                                                <tr>
                                                    <th>
                                                        תאריך
                                                    </th>
                                                    <th>
                                                        נוספה ע"י
                                                    </th>
                                                    <th>
                                                        מצב
                                                    </th>
                                                    <th>
                                                        תיאור
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody>

                                                @foreach (var form in passport1.PassportAuditForms.OrderByDescending(x => x.CreateDate))
                                                {


                                                    <tr>
                                                        <td>
                                                            @form.CreateDate
                                                        </td>
                                                        <td>
                                                            @form.UserName
                                                        </td>
                                                        <td>
                                                            @form.AuditStatus
                                                        </td>
                                                        <td>
                                                            @form.Remark
                                                        </td>
                                                    </tr>

                                                }
                                            </tbody>
                                        </table>
                                    }
                                </ContentTemplate>
                            </TabItem>
                            <TabItem>
                                <ChildContent>
                                    <TabHeader Text="היסטוריית עריכה"></TabHeader>
                                </ChildContent>
                                <ContentTemplate>
                                    @{ var passport2 = (context as K_Passport);
                                        <table class="table table-striped table-hover" style="text-align:right;width:auto">
                                            <thead>
                                                <tr>
                                                    <th>
                                                        תאריך
                                                    </th>
                                                    <th>
                                                        נערכה ע"י
                                                    </th>
                                                    <th>
                                                        תיאור
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var updateAudit in passport2.k_PassportAuditTblVer2s.OrderByDescending(x => x.Date))
                                                {

                                                    <tr>
                                                        <td>
                                                            @updateAudit.Date
                                                        </td>
                                                        <td>
                                                            @updateAudit.UserName
                                                        </td>
                                                        <td>
                                                            @updateAudit.AuditString
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    }
                                </ContentTemplate>
                            </TabItem>
                            <TabItem>
                                <ChildContent>
                                    <TabHeader Text="נתונים נוספים"></TabHeader>
                                </ChildContent>
                                <ContentTemplate>
                                    @{ var passport2 = (context as K_Passport);
                                        <div class="form-row" dir="rtl">
                                            <div class="col-form-label">
                                                @{ if (passport2.GrowingRoom == null)
                                                    {
                                                        <label class="form-check-label" style="text-align: right; font-weight:500">הוכנס ישירות למצאי ע"י</label>
                                                    }
                                                    else
                                                    { <label class="form-check-label" style="text-align: right; font-weight:500">הוכנס לחדר הנבטה ע"י:</label>
                                                    }
                                                }
                                            </div>
                                            <div class="col-form-label">
                                                <label class="form-check-label" style="text-align:right;">@passport2.KPassportInsertAudit.UserName</label>
                                            </div>
                                            <div class="col-form-label">
                                                <label class="form-check-label" style="text-align:right;">@passport2.KPassportInsertAudit.Date</label>
                                            </div>
                                        </div>
                                        <div class="form-row" dir="rtl">
                                            <div class="col-form-label">
                                                <label class="form-check-label" style="text-align: right; font-weight:500">מקדם זריעה SAP:</label>
                                            </div>
                                            <div class="col-form-label">
                                                <label class="form-check-label" style="text-align:right">@passport2.PassportStartingAVG</label>
                                            </div>
                                        </div>
                                    }
                                </ContentTemplate>
                            </TabItem>
                        </TabItems>
                    </SfTab>
                </div>
            </DetailTemplate>

        </GridTemplates>

        <GridAggregates>
            <GridAggregate>
                <GridAggregateColumns>
                    <GridAggregateColumn Field=@nameof(K_Passport.PassportNum) Type="AggregateType.Count">
                        <FooterTemplate>
                            @{
                                var aggregate = (context as AggregateTemplateContext);

                                var num = Convert.ToInt32(aggregate.Count);
                                var magashNum = string.Format("{0:#,0}", num);
                                <b>ספירה:@magashNum</b>

                            }
                        </FooterTemplate>
                    </GridAggregateColumn>
                    <GridAggregateColumn Field=@nameof(K_Passport.MagashAmount) Type="AggregateType.Sum">
                        <FooterTemplate>
                            @{
                                var aggregate = (context as AggregateTemplateContext);
                                var num = Convert.ToInt32(aggregate.Sum);
                                var magashNum = string.Format("{0:#,0}", num);
                                <b>@magashNum</b>
                            }
                        </FooterTemplate>
                    </GridAggregateColumn>
                </GridAggregateColumns>
            </GridAggregate>
        </GridAggregates>

        <GridColumns>
            <GridColumn Field=@nameof(K_Passport.K_PassportId) HeaderText="" HeaderTextAlign="TextAlign.Center" Type="ColumnType.Number" IsPrimaryKey="true" Visible="false" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.HamamaInt) HeaderText="חמ'" HeaderTextAlign="TextAlign.Center" Type="ColumnType.Number" Format="N0" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.GamlonInt) HeaderText="גמ'" HeaderTextAlign="TextAlign.Center" Type="ColumnType.Number" Format="N0" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.PassportNum) HeaderText="פספורט" FilterSettings="@(new FilterSettings{Operator = Syncfusion.Blazor.Operator.Contains})" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.Number" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.Gidul) HeaderText="גידול" FilterSettings="@(new FilterSettings{Operator = Syncfusion.Blazor.Operator.Contains})" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.Zan) HeaderText="זן" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.SowDate) HeaderText="ת.זריעה" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.DateEnd) HeaderText="ת.הוצאה" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.PassportAge) HeaderText="גיל" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.Number" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.MagashAmount) HeaderText="מגשים" HeaderTextAlign="TextAlign.Center" Type="ColumnType.Number" Format="N0" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.AutoPassportAVG) HeaderText="ממוצע" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"> </GridColumn>
            <GridColumn Field=@nameof(K_Passport.PassportStatus) HeaderText="סטטוס" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.PassportCondition) HeaderText="מצב" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
            <GridColumn Field=@nameof(K_Passport.AutoPlantsCalc) HeaderText="הזמנה" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Format="N0" Type="ColumnType.Number" TextAlign="TextAlign.Center" AutoFit="true">
                <Template>
                    @{
                        try
                        {
                            var value = (context as K_Passport);
                            var plantsPerCx = K_PassportFunctions.CxPlantsOrder(value, CxName)[0];
                            <b>@string.Format("{0:#,0}", plantsPerCx)</b>
                        }
                        catch (Exception){}
                    }
                </Template>
            </GridColumn>
            <GridColumn Field=@nameof(K_Passport.CelsTray) HeaderText="סוג מגש" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Format="N0" Type="ColumnType.Number" TextAlign="TextAlign.Center"></GridColumn>
        </GridColumns>

    </SfGrid>
</div>
@*Alert/Error message Dialog*@
<SfDialog Width="250px" IsModal="true" @bind-Visible="@ErrorDialogIsVisible" EnableRtl="true">
    <DialogEvents OnOverlayClick="@OnOverlayclick">
    </DialogEvents>
    <DialogTemplates>
        <Header>@ErrorModalHeaderContent</Header>
        <Content> @ModalError </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="אישור" IsPrimary="true" OnClick="@CloseDialog" />

    </DialogButtons>
</SfDialog>



@code {

    //SPA Hub
    private HubConnection hubConnection;

    //Objects list populate grid
    public K_Passport[] K_Passports;
    //kpassports for cx
    public K_Passport[] k_PassportsPerCx;
    //for cx list
    List<string> CxNames = new List<string>();
    //Grid Object for costum actions
    SfGrid<K_Passport> SfGrid;
    //Spinners
    bool AfterActionSpinner { get; set; } = false;

    //string bind CxName dropDown
    string CxName;

    #region INIT
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/broadcastHub"))
            .Build();

        hubConnection.On("ReceiveMessage", () =>
        {

            Task.Run(async () => { await LoadData(); });
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    //Get list Of K_Passport Objects
    protected async Task LoadData()
    {
        try
        {
            K_Passports = await Http.GetFromJsonAsync<K_Passport[]>("api/KPassports/metzay");
            CxNames = K_Passports.SelectMany(x => x.Passport.Passprods).Select(x => x.UCustName).Distinct().ToList();

            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

    }

    public void Select(SelectingEventArgs args)
    {
        if (args.IsSwiped)
        {
            args.Cancel = true;
        }
    }
    #endregion
    #region FUNCTIONS

    void GetCxPassports()
    {
        try
        {
            if (String.IsNullOrEmpty(CxName))
            {
                ErrorModalHeaderContent = "שגיאה!";
                ModalError = "לא נבחר לקוח!";
                ErrorDialogIsVisible = true;
                return;
            }
        }
        catch (Exception)
        {
            ErrorModalHeaderContent = "שגיאה!";
            ModalError = "ערך לא חוקי!";
            ErrorDialogIsVisible = true;
            return;
        }

        AfterActionSpinner = true;
        try
        {
            k_PassportsPerCx = K_Passports.Where(x => x.Passport.Passprods.Select(x => x.UCustName).FirstOrDefault() == CxName).ToArray();
            if (k_PassportsPerCx.Count() == 0)
            {
                ErrorModalHeaderContent = "אין נתונים!";
                ModalError = "לא נמצאו נתונים!";
                ErrorDialogIsVisible = true;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

        AfterActionSpinner = false;
    }

    async void f()
    {
        await SfGrid.DetailExpandAll();
    }
    void CloseExpandRows()
    {
        SfGrid.DetailCollapseAll();
    }
    #endregion
    #region STYLE
    //CELL MAGASH TYPE STYLE
    public void CustomizeCell(QueryCellInfoEventArgs<K_Passport> args)
    {
        if (args.Column.Field == "CelsTray")
        {
            try
            {

                if (Convert.ToDouble(args.Data.CelsTray) == 180)
                {
                    args.Cell.AddClass(new string[] { "magash-180" });
                }
                else if (Convert.ToDouble(args.Data.CelsTray) == 187)
                {
                    args.Cell.AddClass(new string[] { "magash-187" });
                }
                else if (Convert.ToDouble(args.Data.CelsTray) == 442)
                {
                    args.Cell.AddClass(new string[] { "magash-442" });
                }
                else
                {
                    args.Cell.AddClass(new string[] { "magash-308" });
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }
        ////PASSPORT STYLE
        if (args.Column.Field == "PassportNum")
        {
            args.Cell.AddClass(new string[] { "passport" });
        }
        //LOW AVG
        if (args.Column.Field == "PassportAVG")
        {
            if (args.Data.IsLowAVG == true)
            {
                args.Cell.AddClass(new string[] { "is-low-avg" });
            }
        }

        //HAMAMA STYLE
        if (args.Column.Field == "HamamaInt")
        {
            if (args.Data.Hamama.Trim() == "1")
            {
                args.Cell.AddClass(new string[] { "hamama1" });
            }
            else if (args.Data.Hamama.Trim() == "2")
            {
                args.Cell.AddClass(new string[] { "hamama2" });
            }
            else if (args.Data.Hamama.Trim() == "3")
            {
                args.Cell.AddClass(new string[] { "hamama3" });
            }
            else if (args.Data.Hamama.Trim() == "4")
            {
                args.Cell.AddClass(new string[] { "hamama4" });
            }
            else if (args.Data.Hamama.Trim() == "5")
            {
                args.Cell.AddClass(new string[] { "hamama5" });
            }
            else if (args.Data.Hamama.Trim() == "6")
            {
                args.Cell.AddClass(new string[] { "hamama6" });
            }
            else if (args.Data.Hamama.Trim() == "7")
            {
                args.Cell.AddClass(new string[] { "hamama7" });
            }
            else if (args.Data.Hamama.Trim() == null)
            {
                args.Cell.AddClass(new string[] { "null" });
            }
        }
    }
    //ROW IsNeedToBeAudit STYLE
    public void RowBound(RowDataBoundEventArgs<K_Passport> args)
    {
        if (args.Data.IsNeedToBeAudit == true)
        {
            args.Row.AddClass(new string[] { "is-need-to-be-audit" });
        }
        if (args.Data.IsNeedToBeAudit == true && args.Data.IsSavedForCx == true)
        {
            args.Row.AddClass(new string[] { "is-need-to-be-saved-audit" });
        }
        if (args.Data.IsSavedForCx == true)
        {
            args.Row.AddClass(new string[] { "is-need-to-be-saved" });
        }

    }
    #endregion
    //Error/Alert Modal
    #region Error/Alert Dialog
    //Main Message
    private string ModalError { get; set; } = "";
    private string ErrorModalHeaderContent { get; set; } = "";
    private bool ErrorDialogIsVisible { get; set; } = false;

    private void OnOverlayclick(Microsoft.AspNetCore.Components.Web.MouseEventArgs arg)
    {
        this.ErrorDialogIsVisible = false;
    }

    private void CloseDialog()
    {
        this.ErrorDialogIsVisible = false;
    }

    #endregion
}
<style>

    .magash-180 {
        background-color: plum;
    }

    .magash-187 {
        background-color: lightyellow;
    }

    .magash-442 {
        background-color: grey;
        font-weight: bold;
    }

    .magash-308 {
        background-color: darkseagreen;
        font-weight: bold;
    }

    .magash-250 {
        background-color: green;
        font-weight: bold;
    }

    .magash-210 {
        background-color: hotpink;
        font-weight: bold;
    }

    .magash-260 {
        background-color: rosybrown;
        font-weight: bold;
    }

    .passport {
        background-color: powderblue;
        font-weight: bold;
        color: red;
    }

    .null {
        background-color: antiquewhite;
        font-weight: bold;
    }

    .hamama1 {
        background-color: cornflowerblue;
        font-weight: bold;
        font-size: 18px;
    }

    .hamama2 {
        background-color: yellow;
        font-weight: bold;
        font-size: 18px;
    }

    .hamama3 {
        background-color: lightpink;
        font-weight: bold;
        font-size: 18px;
    }

    .hamama4 {
        background-color: darkseagreen;
        font-weight: bold;
        font-size: 18px;
    }

    .hamama5 {
        background-color: gray;
        font-weight: bold;
        font-size: 18px;
    }

    .hamama6 {
        background-color: cadetblue;
        font-size: 32px;
        font-weight: bold;
    }

    .hamama7 {
        background-color: palevioletred;
        font-weight: bold;
        font-size: 18px;
    }


    #toast_default .e-toast-container {
        color: black;
        font-size: 13px;
        font-weight: normal;
    }

    /*   GRID ROW STYLE*/
    .is-need-to-be-audit {
        background-color: orange;
    }

    .is-need-to-be-saved {
        background-color: deepskyblue;
    }

    .is-need-to-be-saved-audit {
        background-color: mediumpurple;
    }

    .is-low-avg {
        background-color: orangered;
    }

    .clean {
        background-color: white;
    }

    .form-group.col-md-6 {
        width: 200px;
    }

    label.e-float-text {
        position: relative;
        padding-left: 0;
        top: 10%;
    }

    .e-toast-container .e-toast .e-toast-message .e-toast-content {
        color: white;
        font-size: 18px;
        font-weight: normal;
    }

    .e-toast-container .e-toast {
        background-color: black;
    }
</style>