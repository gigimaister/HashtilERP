@page "/order/ordersfortodaytomorrow"
@inject IJSRuntime jsRuntime

@using System.Security.Claims;
@using Microsoft.AspNetCore.Authorization
@using ZXingBlazor.Components
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Spinner
@using HashtilERP.Shared.Models
@using Syncfusion.Blazor.Inputs
@using Microsoft.AspNetCore.SignalR.Client
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Data
@using System.ComponentModel.DataAnnotations;
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.ProgressBar

@inject NavigationManager NavigationManager
@inject HttpClient Http

@attribute [Authorize(Roles = "Administrator,Viewer,Manager-GreenHouse,Agronomist,AuditAvgCounter,Manager-Oren,Sales-A,Sales-B")]
<div style="text-align:right" class="alert alert-primary" role="alert">
    <h2 style="text-align:center">הוצאות להיום/מחר</h2>
</div>



@*Multi AVG for rows Auth for Admin, Green Mnagr & Oren*@
<AuthorizeView Roles="Administrator,Manager-GreenHouse,Manager-Oren">
    <div class="alert alert-secondary" role="alert" style="width:300px">
        <div class="row" style="text-align:right;width:400px;">
            <div class="col">
                <input type="number" style="width:150px" @bind-value="@MultiAVGInput" placeholder="ממוצע" />
            </div>
            <div class="col" style="text-align:right">
                <button class="btn btn-outline-success" @onclick="BtnSendMultiAVG">שליחה</button>
            </div>
        </div>
    </div>
</AuthorizeView>

@if (K_Orders == null)
{
    <div class="col-sm">
        <div class="spin-row">
            <SfSpinner Size="40" Label="מייבא נתונים..." Type="SpinnerType.Bootstrap4" Visible="true" CssClass="e-customClass"></SfSpinner>
        </div>
    </div>
}

@*Spinner*@
<div class="col-sm">
    <div class="spin-row">
        <SfSpinner Size="40" Label="טוען..." Type="SpinnerType.Bootstrap4" Visible="@LoadingSpinner" CssClass="e-customClass"></SfSpinner>
    </div>
</div>



@{
    var Tool = (new List<string>() { "Search" });
}
<div>
    <button class="btn btn-primary" @onclick="BtnOpenNewJobForm">עבודה חדשה</button>
</div>
<div class="row">
    <div class="col" style="text-align:left">
        <button class="btn btn-info"
                type="button"
                @onclick="ClearGridfilter">
            הסר מסנן
        </button>
        <button class="btn btn-warning"
                type="button"
                @onclick="ClearGridSearch">
            ניקוי חיפוש
        </button>
    </div>

</div>
@*Alert/Error message Dialog*@
<SfDialog Width="250px" IsModal="true" @bind-Visible="@ErrorDialogIsVisible" EnableRtl="true">
    <DialogEvents OnOverlayClick="@OnOverlayclick">
    </DialogEvents>
    <DialogTemplates>
        <Header>@ErrorModalHeaderContent</Header>
        <Content> @ModalError </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="אישור" IsPrimary="true" OnClick="@CloseDialog" />

    </DialogButtons>
</SfDialog>

@*grid*@
<SfGrid DataSource="@K_Orders" FrozenRows="0" Height="500" Width="100%" @ref="@SfGrid"
        AllowFiltering="true" Toolbar=@Tool EnableRtl="true"
        AllowGrouping="false" AllowSorting="true" AllowSelection="true">
    <GridSelectionSettings CheckboxOnly="true" Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
    <GridEvents OnRecordDoubleClick="RecordDoubleClickHandler" TValue="K_Order"
                RowSelected="RowSelected" RowDeselected="RowDeSelected" RowDataBound="RowBound"></GridEvents>
    <GridEditSettings AllowAdding="true" AllowEditing="false" AllowDeleting="true" Mode="EditMode.Dialog"></GridEditSettings>
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
    <GridAggregates>
        <GridAggregate>
            <GridAggregateColumns>
                <GridAggregateColumn Field=@nameof(K_Order.CxName) Type="AggregateType.Count">
                    <FooterTemplate>
                        @{
                            var aggregate = (context as AggregateTemplateContext);

                            <b>ספירה: @aggregate.Count</b>

                        }
                    </FooterTemplate>
                </GridAggregateColumn>
            </GridAggregateColumns>
        </GridAggregate>

    </GridAggregates>
    <GridColumns>
        <GridColumn Field=@nameof(K_Order.JobId) HeaderText="" HeaderTextAlign="TextAlign.Center" Type="ColumnType.Number" IsPrimaryKey="true" Visible="false" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Type="ColumnType.CheckBox" HeaderTextAlign="TextAlign.Center" Width="50"></GridColumn>
        <GridColumn Field=@nameof(K_Order.MarketingDate) HeaderText="ת.הוצאה" HeaderTextAlign="TextAlign.Center" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Order.CxName) HeaderText="לקוח" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Order.Gidul) HeaderText="גידול" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Order.Zan) HeaderText="זן" AllowEditing="false" HeaderTextAlign="TextAlign.Center" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Order.JobPlantsNum) HeaderText="כ.שתילים" HeaderTextAlign="TextAlign.Center" Format="N0" Type="ColumnType.Number" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Order.JobNumOfMagash) HeaderText="כ.מגשים" HeaderTextAlign="TextAlign.Center" Format="N0" Type="ColumnType.Number" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Order.JobPlansAvarage) HeaderText="ממוצע" HeaderTextAlign="TextAlign.Center" Format="N0" Type="ColumnType.Number" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Order.HamamaRemarks) HeaderText="הערות מנהל עבודה" HeaderTextAlign="TextAlign.Center" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(K_Order.DeliveryRemarks) HeaderText="הערות הובלה" HeaderTextAlign="TextAlign.Center" Type="ColumnType.String" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>

    </GridColumns>
</SfGrid>

@*Row Edit Dialog*@
<SfDialog Target="#target" EnableRtl="true"
          Width="800px"
          Height="800px"
          @bind-Visible="@RowEditDialogShow" ShowCloseIcon="true" IsModal="true">

    <DialogTemplates>
        <Content>
            <SfTab HeaderPlacement="HeaderPosition.Top">
                <TabItems>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="ראשי"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <br />
                            <div class="container">
                                <div class="form-group">
                                    <div style="text-align:right" class="alert alert-success" role="alert">
                                        <div class="row">
                                            <h5 style="text-align:center">לקוח: @K_OrderForEdit.CxName</h5>
                                        </div>
                                        <div class="row">
                                            <h5>גידול: @K_OrderForEdit.Gidul</h5>
                                        </div>
                                        <div class="row">
                                            <h5>זן: @K_OrderForEdit.Zan</h5>
                                        </div>
                                        <div class="row">
                                            <h5>ת.הוצאה: @DateTimeToShortString(K_OrderForEdit.MarketingDate),@KOrderAlgorithemShared.GetHebrewDayOfTheWeek(K_OrderForEdit.MarketingDate)</h5>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col">
                                            <label style="font-size:16px;font-weight:bold" for="plantsinput">כמות שתילים</label>
                                            <input max="1000000" class="form-control" @bind-value="@K_OrderForEdit.JobPlantsNum" type="number">
                                        </div>
                                        <div class="col">
                                            <label style="font-size:16px;font-weight:bold" for="plantsinput">ת.שיווק</label>
                                            <SfDatePicker TValue="DateTime?" @bind-Value="@K_OrderForEdit.MarketingDate"></SfDatePicker>
                                        </div>
                                    </div>
                                    <br />
                                    <div class="row">
                                        <div class="col">
                                            <label style="font-size:16px;font-weight:bold" for="plantsinput">מצב הזמנה</label>
                                            <SfDropDownList TValue="string" TItem="string" enab DataSource="@KOrderStatusList" @bind-Value="@K_OrderForEdit.FixedCoordinationRemark" Placeholder=""></SfDropDownList>
                                        </div>
                                        <div class="col">
                                            <label style="font-size:16px;font-weight:bold" for="plantsinput">הערה מתאמת דוח</label>
                                            <SfTextBox Multiline=true Placeholder='' @bind-Value="@K_OrderForEdit.OpenCoordinationRemark"></SfTextBox>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            @{ if (RowEditDialogShow == true)
                                {
                                    <div class="table-responsive">
                                        <table class="table table-striped" style="text-align:right;width:auto">
                                            <thead>
                                                <tr>
                                                    <th>
                                                        שם
                                                    </th>
                                                    <th>
                                                        טלפון 1
                                                    </th>
                                                    <th>
                                                        טלפון 2
                                                    </th>
                                                    <th>
                                                        הערות
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <tr>
                                                    <td>
                                                        @K_OrderForEdit.Ocrd.CardName
                                                    </td>
                                                    <td>
                                                        @K_OrderForEdit.Ocrd.Phone1
                                                    </td>
                                                    <td>
                                                        @K_OrderForEdit.Ocrd.Phone2
                                                    </td>
                                                    <td>
                                                        @K_OrderForEdit.Ocrd.UStatus
                                                    </td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>

                                }
                            }
                        </ContentTemplate>
                    </TabItem>

                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="היסטוריית עריכה"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>

                        </ContentTemplate>
                    </TabItem>
                </TabItems>
            </SfTab>


        </Content>

        <FooterTemplate>
            <AuthorizeView Roles="Administrator,Sales-A,Sales-B">
                <div class="row text-center">
                    <div class="col">
                        <button class="btn btn-success" @onclick="@(_ => { SendRowEdit(K_OrderForEdit); })">אישור</button>
                    </div>
                    <div class="col">
                        <button class="btn btn-danger" @onclick="@CancelRowEditDialogShow">ביטול</button>
                    </div>
                </div>
            </AuthorizeView>
        </FooterTemplate>
    </DialogTemplates>
</SfDialog>

@*New Job Form Dialog*@
<SfDialog Target="#target" EnableRtl="true"
          Width="400px"
          Height="700px"
          @bind-Visible="@NewJobFormIsVisible" ShowCloseIcon="false" IsModal="true">

    <DialogTemplates>
        <Header>
            <div class="alert alert-success" role="alert">
                <h4 style="text-align:center">עבודה חדשה</h4>
            </div>
        </Header>
        <Content>
            <form>
                <div class="form-group">
                    <label>בחירת תאריך</label>
                    <SfDatePicker TValue="DateTime?" EnableRtl="true" @bind-Value="@NewJobK_Order.MarketingDate" Placeholder='תאריך הוצאה'></SfDatePicker>
                </div>
                <div class="form-group">
                    <label>בחירת לקוח</label>
                    <SfAutoComplete TValue="string" TItem="K_Order" Placeholder="בחירת לקוח" @bind-Value="@NewJobK_Order.CxName" DataSource="@DropDownKOrderSapCxNames">
                        <AutoCompleteFieldSettings Value="CxName"></AutoCompleteFieldSettings>
                    </SfAutoComplete>
                </div>
                <div class="form-group">
                    <label>בחירת גידול</label>
                    <SfAutoComplete TValue="string" TItem="string" Placeholder="גידול" @onmousedown="@(e => GidulMouseClick(e))" @bind-Value="@NewJobK_Order.Gidul" DataSource="@Giduls">
                    </SfAutoComplete>
                </div>
                <div class="form-group">
                    <label>בחירת זן</label>
                    <SfAutoComplete TValue="string" TItem="string" Placeholder="זן" @onmousedown="@(e => ZanMouseClick(e))" @bind-Value="@NewJobK_Order.Zan" DataSource="@Zans">
                    </SfAutoComplete>
                </div>
                <div class="row">
                    <div class="col">
                        <div class="form-group">
                            <label>כ.שתילים</label>
                            <input type="number" @bind-value="NewJobK_Order.JobPlantsNum" class="form-control" placeholder="שתילים" />
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            <label>כ.מגשים</label>
                            <input type="number" @bind-value="NewJobK_Order.JobNumOfMagash" class="form-control" placeholder="מגשים" />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <div class="form-group">
                            <label>ממוצע</label>
                            <input type="number" @bind-value="NewJobK_Order.JobPlansAvarage" max="999" @onkeydown="KeyDown" class="form-control" placeholder="ממוצע" />
                        </div>
                    </div>
                    <div class="col">
                        <div class="row">
                            <label>ממוצע לחישוב: @AVGAutoCalc</label>
                        </div>
                        <div class="row">
                            <label>מגשים: @NewJobK_Order.JobNumOfMagash</label>
                        </div>
                        <div class="row">
                            <label>כ.שתילים: @AutoPlantsCalc</label>
                        </div>
                    </div>
                </div>           
                @*<div class="form-group">
                    <div class="alert alert-danger" role="alert">
                        <label>כ.כלובים (רק אם רלוונטי!)</label>
                        <input type="number" @bind-value="NewJobK_Order.NumOfCages" class="form-control" placeholder="כ.כלובים" />
                    </div>
                </div>*@

                @*check box*@
                <div class="form-group">
                    <div class="alert alert-warning" role="alert">
                        <label>לסמן את הרלוונטי</label>
                        <div class="row">
                            <div class="col">
                                <div>
                                    <SfCheckBox @bind-Checked="@NewJobK_Order.IsCageSmall" EnableRtl="true" Label="כלובים קטנים"></SfCheckBox>
                                </div>
                                <div>
                                    <SfCheckBox @bind-Checked="@NewJobK_Order.IsCxComeToPickUp" EnableRtl="true" Label="מגיע לקחת"></SfCheckBox>
                                </div>
                                <div>
                                    <SfCheckBox @bind-Checked="@NewJobK_Order.IsTakeoutJobTomorrow" EnableRtl="true" Label="להוציא מחר"></SfCheckBox>
                                </div>
                            </div>
                            <div class="col">
                                <div>
                                    <SfCheckBox @bind-Checked="@NewJobK_Order.IsNeedToConfirmJob" EnableRtl="true" Label="לוודא הוצאה"></SfCheckBox>
                                </div>
                                <div>
                                    <SfCheckBox @bind-Checked="@NewJobK_Order.IsNeedToConfirmJob" EnableRtl="true" Label="סל ירק"></SfCheckBox>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <label>הערות הובלה</label>
                    <SfTextBox Multiline=true EnableRtl="true" Placeholder="הערות הובלה" @bind-value="NewJobK_Order.DeliveryRemarks"></SfTextBox>
                </div>
                <div class="form-group">
                    <label>הערות לחממה</label>
                    <div class="multiline">
                        <SfTextBox Multiline=true EnableRtl="false" Placeholder="הערות למנהל עבודה" @bind-value="NewJobK_Order.HamamaRemarks"></SfTextBox>
                    </div>
                </div>

            </form>
        </Content>
        <FooterTemplate>
            <AuthorizeView Roles="Administrator,Sales-A,Sales-B">
                <div class="row text-center">
                    <div class="col">
                        <button class="btn btn-success" @onclick="@(_ => { BtnSendNewJob(NewJobK_Order); })">שליחה</button>
                    </div>
                    <div class="col">
                        <button class="btn btn-outline-info" @onclick="@(_ => { SendRowEdit(K_OrderForEdit); })">שליחה +</button>
                    </div>
                    <div class="col">
                        <button class="btn btn-danger" @onclick="@NewJobCloseForm">ביטול</button>
                    </div>
                </div>
            </AuthorizeView>
        </FooterTemplate>
    </DialogTemplates>
</SfDialog>

@*Toast Component*@
<SfToast @ref="ToastObj" ID="toast_default" Title="" Timeout=3000 Icon="e-meeting" EnableRtl="true" Content="@ToastContent">
    <ToastPosition X="Center"></ToastPosition>
</SfToast>

@code {
    //Page settings
    #region Page Settings

    //list of KOrder(Grid Rows)
    K_Order[] K_Orders;

    List<K_Order> KOrderForMultiEditSelect = new List<K_Order>();

    //KOrder Object for Edit Data
    K_Order K_OrderForEdit = new K_Order();

    //"מחפש בין התאריכים Show Counter"
    bool ShowCorrectDate = false;

    //For short date string
    string startDate, endDate;

    // Hub
    private HubConnection hubConnection;
    public bool IsConnected =>
    hubConnection.State == HubConnectionState.Connected;

    Task SendMessage() => hubConnection.SendAsync("SendMessage");

    //getting week sun to sat dates
    string ReportBeginDate = KOrderAlgorithemShared.GetPrepReportWeekRange(DateTime.Today)[0].ToShortDateString();
    string ReportEndDate = KOrderAlgorithemShared.GetPrepReportWeekRange(DateTime.Today)[1].ToShortDateString();

    //Loading Spinner
    bool LoadingSpinner { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        hubConnection = new HubConnectionBuilder()
           .WithUrl(NavigationManager.ToAbsoluteUri("/broadcastHub"))
           .Build();

        hubConnection.On("ReceiveMessage", () =>
        {

            Task.Run(async () => { await LoadData(); });
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    //Get list Of KOrder Todat/Tomorrow Objects
    protected async Task LoadData()
    {
        try
        {
            ShowCorrectDate = false;
            K_Orders = await Http.GetFromJsonAsync<K_Order[]>("api/WeeklyKOrder/GetKOrdersForTodayTomorrow");
            //GET CX FROM SAP
            DropDownKOrderSapCxNames = await Http.GetFromJsonAsync<K_Order[]>("api/WeeklyKOrder/GetSapCxList");
            //GET PASSPORTS
            k_PassportsForJobs = await Http.GetFromJsonAsync<K_Passport[]>("api/KPassports/ForKOrderJobs");

            Giduls = k_PassportsForJobs.Select(x => x.Gidul).Distinct().ToList();
            Zans = k_PassportsForJobs.Select(x => x.Zan).Distinct().ToList();


            StateHasChanged();
        }
        catch (Exception e) { Console.WriteLine(e.Message); }
    }
    #endregion

    //New Job Form
    #region New Job Form

    //AVG string for Auto calc num of magash
    string AVGAutoCalc = "";

    //for Auto plants Calc
    string AutoPlantsCalc;

    private bool NewJobFormIsVisible { get; set; } = false;

    //object for insert new job
    K_Order NewJobK_Order { get; set; } = new K_Order();

    //list of korder only for dropdown sap cx list
    K_Order[] DropDownKOrderSapCxNames;

    //Passports for gidul and zan
    K_Passport[] k_PassportsForJobs;

    List<string> Giduls = new List<string>();
    List<string> Zans = new List<string>();

    //new job after button click
    async void BtnSendNewJob(K_Order k_Order)
    {
        //if no cx and or market date null
        if (k_Order.MarketingDate == null || k_Order.CxName == null)
        {
            ErrorModalHeaderContent = "שגיאה!";
            ModalError = "תאריך הוצאה ולקוח נדרשים!";
            ErrorDialogIsVisible = true;
            return;
        }

        //id market date for the past dates
        var md = Convert.ToDateTime(k_Order.MarketingDate).Subtract(DateTime.Today).TotalDays;
        if (md < 0)
        {
            ErrorModalHeaderContent = "שגיאה!";
            ModalError = "תאריך הוצאה חייב להיות עתידי!";
            ErrorDialogIsVisible = true;
            return;
        }


        NewJobFormIsVisible = false;
        LoadingSpinner = true;
        await SendNewJob(k_Order);
        LoadingSpinner = false;
    }

    //New KOrder job
    public async Task<int> SendNewJob(K_Order k_Order)
    {
        try
        {
            k_Order.KOrderEnteringDate = DateTime.Today;
            k_Order.ItemCode = k_PassportsForJobs.Where(x => x.Gidul == k_Order.Gidul && x.Zan == k_Order.Zan).Select(x => x.ItemCode).Distinct().Single();

            var rslt = await Http.PostAsJsonAsync("api/WeeklyKOrder/NewKOrderInsert", k_Order);
            var content = await rslt.Content.ReadAsStringAsync();

            //Http Response Failed On Insert
            if (rslt.IsSuccessStatusCode)
            {
                if (IsConnected) await SendMessage();
                ToastContent = "נשמר!";
                StateHasChanged();
                await ShowToast();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

        return 0;
    }

    //Giduz & Zan inputs
    void GidulMouseClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs mouseEventArgs)
    {
        if (mouseEventArgs.Buttons == 1)
        {
            if (NewJobK_Order.Zan != null)
            {
                try
                {
                    NewJobK_Order.Gidul = k_PassportsForJobs.Where(x => x.Zan == NewJobK_Order.Zan).Select(x => x.Gidul).Distinct().Single();

                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                    Giduls = k_PassportsForJobs.Select(x => x.Gidul).Distinct().ToList();
                }
            }
        }
    }
    //After Pick Zan MouseClick
    void ZanMouseClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs mouseEventArgs)
    {
        if (mouseEventArgs.Buttons == 1)
        {
            try
            {
                if (NewJobK_Order.Gidul != null)
                {
                    Zans = k_PassportsForJobs.Where(x => x.Gidul == NewJobK_Order.Gidul).Select(x => x.Zan).Distinct().ToList();
                }
                else
                {
                    NewJobK_Order.Gidul = k_PassportsForJobs.Where(x => x.Zan == NewJobK_Order.Zan).Select(x => x.Gidul).Distinct().Single();
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                Zans = k_PassportsForJobs.Select(x => x.Zan).Distinct().ToList();
            }
        }
    }
    //AVG Input
    void KeyDown(KeyboardEventArgs args)
    {
        var tempkOrderAutoPlants = new K_Order();
        tempkOrderAutoPlants.JobPlantsNum = NewJobK_Order.JobPlantsNum;
        try
        {
            if (args.Code == "Backspace" && AVGAutoCalc.Length > 0)
            {
                AVGAutoCalc = AVGAutoCalc.Remove(AVGAutoCalc.Length - 1, 1);
            }
            else if (args.Code == "Delete")
            {
                AVGAutoCalc = "";
            }
            else
            {
                AVGAutoCalc += args.Key;
            }
            if (AVGAutoCalc.Length > 3)
            {
                AVGAutoCalc = AVGAutoCalc.Remove(AVGAutoCalc.Length - 1, 1);
                NewJobK_Order.JobPlansAvarage = Convert.ToInt32(AVGAutoCalc);

                ErrorDialogIsVisible = true;
                ErrorModalHeaderContent = "שגיאת ממוצע!";
                ModalError = "אורך ממוצע מקס' הינו 3 ספרות!";
            }

            var intAVG = Convert.ToInt32(AVGAutoCalc);
            NewJobK_Order.JobNumOfMagash = NewJobK_Order.JobPlantsNum / intAVG;

            KOrdersfunctions.SetAvgForKorder(intAVG, tempkOrderAutoPlants);
            try
            {
                AutoPlantsCalc = tempkOrderAutoPlants.JobPlantsNum.ToString();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

    }

    //open new job form btn click
    void BtnOpenNewJobForm()
    {
        NewJobFormIsVisible = true;
    }
    //close new job form
    void NewJobCloseForm()
    {
        NewJobFormIsVisible = false;
        NewJobK_Order = new K_Order();
        AVGAutoCalc = "";
    }

    #endregion

    //Error/Alert Modal
    #region Error/Alert Dialog
    //Main Message
    private string ModalError { get; set; } = "";
    private string ErrorModalHeaderContent { get; set; } = "";
    private bool ErrorDialogIsVisible { get; set; } = false;

    private void OnOverlayclick(Microsoft.AspNetCore.Components.Web.MouseEventArgs arg)
    {
        this.ErrorDialogIsVisible = false;
    }

    private void CloseDialog()
    {
        this.ErrorDialogIsVisible = false;
    }

    #endregion

    //SfGrid Methods
    #region SfGrid methods and settings

    //Grid Object for costum actions
    SfGrid<K_Order> SfGrid;

    //List KOrder for Multi AVG
    List<K_Order> selectedRows = new List<K_Order>();

    //AVGInput For Multu AVG
    int? MultiAVGInput { get; set; }

    //Syncfusion RowSelect Way
    public async Task RowSelected(RowSelectEventArgs<K_Order> args)
    {
        selectedRows = SfGrid.SelectedRecords;
    }
    //Syncfusion RowSelect Way
    public async Task RowDeSelected(RowDeselectEventArgs<K_Order> args)
    {
        selectedRows = SfGrid.SelectedRecords;
    }


    //MULTI AVG BTN CLICK
    async void BtnSendMultiAVG()
    {
        if (selectedRows.Count() == 0)
        {
            ErrorDialogIsVisible = true;
            ErrorModalHeaderContent = "שגיאה!";
            ModalError = "לא נבחרו עבודות!";
        }
        else if (MultiAVGInput == null || MultiAVGInput == 0)
        {
            ErrorDialogIsVisible = true;
            ErrorModalHeaderContent = "שגיאה!";
            ModalError = "לא הוזן ערך לממוצע כולל!";
        }
        else if (MultiAVGInput < 0)
        {
            ErrorDialogIsVisible = true;
            ErrorModalHeaderContent = "שגיאה!";
            ModalError = "לא ניתן להזין ערך שלילי!";
        }
        else
        {
            LoadingSpinner = true;
            await SendMultiAVGRows();
            LoadingSpinner = false;

        }

    }

    //MULTI AVG Rows Sent
    async Task<int> SendMultiAVGRows()
    {
        foreach (var order in selectedRows)
        {
            try
            {
                KOrdersfunctions.SetAvgForKorder(Convert.ToDouble(MultiAVGInput), order);
                order.JobPlansAvarage = MultiAVGInput;
                var rslt = await Http.PutAsJsonAsync($"api/WeeklyKOrder/UpdateTodayTomorrowOrder/{order.JobId}", order);

                if (rslt.IsSuccessStatusCode)
                {
                    continue;
                }
                else
                {
                    ToastContent = await rslt.Content.ReadAsStringAsync();
                    StateHasChanged();
                    await ShowToast();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                ModalError = ex.Message;
                ErrorDialogIsVisible = true;

            }

        }

        if (IsConnected) await SendMessage();
        ToastContent = "נשמר!";
        StateHasChanged();
        await ShowToast();
        MultiAVGInput = null;

        return 0;
    }

    //On double click Open
    public void RecordDoubleClickHandler(RecordDoubleClickEventArgs<K_Order> args)
    {
        K_OrderForEdit = args.RowData;
        RowEditDialogShow = true;
    }

    //Nullble DateTime To Short Date String
    string DateTimeToShortString(DateTime? dateTime)
    {
        DateTime date = Convert.ToDateTime(dateTime);
        var shortDate = date.ToShortDateString();
        return shortDate;
    }

    //button clear filter
    public async void ClearGridfilter()
    {
        await this.SfGrid.ClearFiltering();
    }

    //clear search box
    public void ClearGridSearch()
    {
        try
        {
            this.SfGrid.Search("");
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

    }

    public IEditorSettings CustomerEditParams = new StringEditCellParams
    {
        Params = new TextBoxModel() { EnableRtl = true, ShowClearButton = false, Multiline = true }
    };
    #endregion

    //Grid Edit Modal
    #region Grid Edit Modal

    //cx marketing date Min limit
    public DateTime MinDate { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);

    //KOrder Job Status list
    List<string> KOrderStatusList = K_OrderStatus.GetKOrderStatus();

    // Property to control the row edit dialog.
    public bool RowEditDialogShow { get; set; } = false;

    //cancel Edit row Modal
    public void CancelRowEditDialogShow()
    {
        RowEditDialogShow = false;
    }

    async void SendRowEdit(K_Order k_Order)
    {
        RowEditDialogShow = false;
        LoadingSpinner = true;
        await UpdateEditRow(k_Order);
        LoadingSpinner = false;
    }


    public async Task<int> UpdateEditRow(K_Order k_Order)
    {
        try
        {
            var rslt = await Http.PutAsJsonAsync($"api/KOrder/UpdatePrepReport/{k_Order.JobId}", k_Order);

            if (rslt.IsSuccessStatusCode)
            {
                if (IsConnected) await SendMessage();
                ToastContent = "נשמר!";
                StateHasChanged();
                await ShowToast();
            }
            else
            {
                ToastContent = await rslt.Content.ReadAsStringAsync();
                StateHasChanged();
                await ShowToast();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        return 0;
    }
    #endregion

    #region TOAST
    //TOAST
    public SfToast ToastObj;
    private string ToastContent { get; set; } = "";
    private async Task ShowToast()
    {
        await this.ToastObj.Show();
    }

    private async Task HideToast()
    {
        await this.ToastObj.Hide("All");
    }
    #endregion

    //Style GRID
    #region Grid Style Methods
    //ROW IsNeedToBeAudit STYLE
    public void RowBound(RowDataBoundEventArgs<K_Order> args)
    {

    }


    #endregion
}

<style>
    .schedule-was-ok {
        background-color: palegoldenrod
    }

    .schedule-was-cancel {
        background-color: lightpink
    }

    .e-toast-container .e-toast .e-toast-message .e-toast-content {
        color: white;
        font-size: 18px;
        font-weight: normal;
    }

    .e-toast-container .e-toast {
        background-color: black;
    }
</style>
